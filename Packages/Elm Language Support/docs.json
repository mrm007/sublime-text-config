[
{
  "name": "Basics",
  "document": "Tons of useful functions that get imported by default.\n\nThe following libraries also get imported by default: List, Signal,\nText, Maybe, Time, Graphics.Element, Color, Graphics.Collage.\n\n# Equality\n@docs (==), (/=)\n\n# Comparison\n\nThese functions only work on `comparable` types. This includes numbers,\ncharacters, strings, lists of comparable things, and tuples of comparable\nthings. Note that tuples with 7 or more elements are not comparable; why\nare your tuples so big?\n\n@docs (\u003c), (\u003e), (\u003c=), (\u003e=), max, min, Order, compare\n\n# Booleans\n@docs not, (&&), (||), xor, otherwise\n\n# Mathematics\n@docs (+), (-), (*), (/), (^), div, rem, mod, abs, sqrt, clamp, logBase, e\n\n# Trigonometry\n@docs pi, cos, sin, tan, acos, asin, atan, atan2\n\n# Number Conversions\n@docs round, floor, ceiling, truncate, toFloat\n\n# Angle Conversions\nAll angle conversions result in &ldquo;standard Elm angles&rdquo;\nwhich happen to be radians.\n\n@docs degrees, radians, turns\n\n# Polar Coordinates\n@docs toPolar, fromPolar\n\n# Floating Point Checks\n@docs isNaN, isInfinite\n\n# Tuples\n@docs fst, snd\n\n# Higher-Order Helpers\n@docs id, (\u003c|), (|\u003e), (.), always, flip, curry, uncurry",
  "aliases": [],
  "datatypes": [
    {
      "name": "Order",
      "comment": "Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.",
      "raw": "data Order = LT | EQ | GT",
      "typeVariables": [],
      "constructors": [
        {
          "name": "LT",
          "type": {
            "tag": "adt",
            "name": "Order",
            "args": []
          }
        },
        {
          "name": "EQ",
          "type": {
            "tag": "adt",
            "name": "Order",
            "args": []
          }
        },
        {
          "name": "GT",
          "type": {
            "tag": "adt",
            "name": "Order",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "&&",
      "comment": "The and operator. True if both inputs are True.\nThis operator short-circuits if the first argument is False.",
      "raw": "(&&) : Bool -\u003e Bool -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "right",
      "precedence": 3
    },
    {
      "name": "*",
      "comment": "",
      "raw": "(*) : number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      },
      "associativity": "left",
      "precedence": 7
    },
    {
      "name": "+",
      "comment": "",
      "raw": "(+) : number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      },
      "associativity": "left",
      "precedence": 6
    },
    {
      "name": "-",
      "comment": "",
      "raw": "(-) : number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      },
      "associativity": "left",
      "precedence": 6
    },
    {
      "name": ".",
      "comment": "Function composition: `(f . g == (\\\\x -\u003e f (g x)))`",
      "raw": "(.) : (b -\u003e c) -\u003e (a -\u003e b) -\u003e (a -\u003e c)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "var",
          "name": "c"
        }
      },
      "associativity": "right",
      "precedence": 9
    },
    {
      "name": "/",
      "comment": "Floating point division.",
      "raw": "(/) : Float -\u003e Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      },
      "associativity": "left",
      "precedence": 7
    },
    {
      "name": "/=",
      "comment": "",
      "raw": "(/=) : a -\u003e a -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "\u003c",
      "comment": "",
      "raw": "(\u003c)  : comparable -\u003e comparable -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "\u003c=",
      "comment": "",
      "raw": "(\u003c=) : comparable -\u003e comparable -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "\u003c|",
      "comment": "Function application `f \u003c| x == f x`. This function is useful for avoiding\nparenthesis. Consider the following code to create a text element:\n\n        text (monospace (toText \"code\"))\n\nThis can also be written as:\n\n        text . monospace \u003c| toText \"code\"",
      "raw": "(\u003c|) : (a -\u003e b) -\u003e a -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      },
      "associativity": "right",
      "precedence": 0
    },
    {
      "name": "==",
      "comment": "",
      "raw": "(==) : a -\u003e a -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "\u003e",
      "comment": "",
      "raw": "(\u003e)  : comparable -\u003e comparable -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "\u003e=",
      "comment": "",
      "raw": "(\u003e=) : comparable -\u003e comparable -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "non",
      "precedence": 4
    },
    {
      "name": "^",
      "comment": "Exponentiation: `3^2 == 9`",
      "raw": "(^) : number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      },
      "associativity": "left",
      "precedence": 8
    },
    {
      "name": "abs",
      "comment": "Take the absolute value of a number.",
      "raw": "abs : number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "acos",
      "comment": "",
      "raw": "acos : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "always",
      "comment": "Creates a [constant function](http://en.wikipedia.org/wiki/Constant_function),\na function that *always* returns the same value regardless of what input you give.\nIt is defined as:\n\n        always a b = a\n\nIt totally ignores the second argument, so `always 42` is a function that always\nreturns 42. When you are dealing with higher-order functions, this comes in\nhandy more often than you might expect. For example, creating a zeroed out list\nof length ten would be:\n\n        map (always 0) [0..9]",
      "raw": "always : a -\u003e b -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "var",
            "name": "b"
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "asin",
      "comment": "",
      "raw": "asin : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "atan",
      "comment": "You probably do not want to use this. It takes `(y/x)` as the\nargument, so there is no way to know whether the negative signs comes from\nthe `y` or `x`. Thus, the resulting angle is always between &pi;/2 and -&pi;/2\n(in quadrants I and IV). You probably want to use `atan2` instead.",
      "raw": "atan : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "atan2",
      "comment": "This helps you find the angle of a cartesian coordinate.\nYou will almost certainly want to use this instead of `atan`.\nSo `atan2 y x` computes *atan(y/x)* but also keeps track of which\nquadrant the angle should really be in. The result will be between\n&pi; and -&pi;, giving you the full range of angles.",
      "raw": "atan2 : Float -\u003e Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "ceiling",
      "comment": "Ceiling function, rounding up.",
      "raw": "ceiling : Float -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "clamp",
      "comment": "Clamps a number within a given range. With the expression\n`clamp 100 200 x` the results are as follows:\n\n      100     if x \u003c 100\n       x      if 100 \u003c= x \u003c 200\n      200     if 200 \u003c= x",
      "raw": "clamp : number -\u003e number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "compare",
      "comment": "Compare any two comparable values. Comparable values include `String`, `Char`,\n`Int`, `Float`, `Time`, or a list or tuple containing comparable values.\nThese are also the only values that work as `Dict` keys or `Set` members.",
      "raw": "compare : comparable -\u003e comparable -\u003e Order",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Order",
          "args": []
        }
      }
    },
    {
      "name": "cos",
      "comment": "",
      "raw": "cos : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "curry",
      "comment": "Change how arguments are passed to a function.\nThis splits paired arguments into two separate arguments.",
      "raw": "curry : ((a,b) -\u003e c) -\u003e a -\u003e b -\u003e c",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  },
                  {
                    "tag": "var",
                    "name": "b"
                  }
                ]
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "var",
            "name": "b"
          }
        ],
        "result": {
          "tag": "var",
          "name": "c"
        }
      }
    },
    {
      "name": "degrees",
      "comment": "Convert degrees to standard Elm angles (radians).",
      "raw": "degrees : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "div",
      "comment": "Integer division, remainder is discarded.",
      "raw": "div : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      },
      "associativity": "left",
      "precedence": 7
    },
    {
      "name": "e",
      "comment": "An approximation of e.",
      "raw": "e : Float",
      "type": {
        "tag": "adt",
        "name": "Float",
        "args": []
      }
    },
    {
      "name": "flip",
      "comment": "Flips the order of the first two arguments to a function.",
      "raw": "flip : (a -\u003e b -\u003e c) -\u003e (b -\u003e a -\u003e c)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "var",
          "name": "c"
        }
      }
    },
    {
      "name": "floor",
      "comment": "Floor function, rounding down.",
      "raw": "floor : Float -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "fromPolar",
      "comment": "Start with polar coordinates (r,&theta;)\nand get out cartesian coordinates (x,y).",
      "raw": "fromPolar : (Float,Float) -\u003e (Float,Float)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "fst",
      "comment": "Given a 2-tuple, returns the first value.",
      "raw": "fst : (a,b) -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "id",
      "comment": "Given a value, returns exactly the same value.",
      "raw": "id : a -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "isInfinite",
      "comment": "",
      "raw": "isInfinite : Float -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isNaN",
      "comment": "",
      "raw": "isNaN : Float -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "logBase",
      "comment": "Calculate the logarithm of a number with a given base: `logBase 10 100 == 2`",
      "raw": "logBase : number -\u003e number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "max",
      "comment": "Given two comparables, returns the larger one.",
      "raw": "max : comparable -\u003e comparable -\u003e comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "var",
          "name": "comparable"
        }
      }
    },
    {
      "name": "min",
      "comment": "Given two comparables, returns the smaller one.",
      "raw": "min : comparable -\u003e comparable -\u003e comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "var",
          "name": "comparable"
        }
      }
    },
    {
      "name": "mod",
      "comment": "Perform modular arithmetic: ``7 `mod` 2 == 1``",
      "raw": "mod : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      },
      "associativity": "left",
      "precedence": 7
    },
    {
      "name": "not",
      "comment": "Negate a boolean value: `(not True == False)` and `(not False == True)`",
      "raw": "not : Bool -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "otherwise",
      "comment": "Equal to true. Useful as the last case of a multi-way-if.",
      "raw": "otherwise : Bool",
      "type": {
        "tag": "adt",
        "name": "Bool",
        "args": []
      }
    },
    {
      "name": "pi",
      "comment": "An approximation of pi.",
      "raw": "pi : Float",
      "type": {
        "tag": "adt",
        "name": "Float",
        "args": []
      }
    },
    {
      "name": "radians",
      "comment": "Convert radians to standard Elm angles (radians).",
      "raw": "radians : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "rem",
      "comment": "Finds the remainder after dividing one number by another: ``4 `rem` 3 == 1``",
      "raw": "rem : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      },
      "associativity": "left",
      "precedence": 7
    },
    {
      "name": "round",
      "comment": "Round a number to the nearest integer.",
      "raw": "round : Float -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "sin",
      "comment": "",
      "raw": "sin : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "snd",
      "comment": "Given a 2-tuple, returns the second value.",
      "raw": "snd : (a,b) -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "sqrt",
      "comment": "Take the square root of a number.",
      "raw": "sqrt : number -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "tan",
      "comment": "",
      "raw": "tan : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "toFloat",
      "comment": "Convert an integer into a float.",
      "raw": "toFloat : Int -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "toPolar",
      "comment": "Start with cartesian coordinates (x,y)\nand get out polar coordinates (r,&theta;).",
      "raw": "toPolar : (Float,Float) -\u003e (Float,Float)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "truncate",
      "comment": "Truncate a decimal number, rounding towards zero.",
      "raw": "truncate : Float -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "turns",
      "comment": "Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.",
      "raw": "turns : Float -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "uncurry",
      "comment": "Change how arguments are passed to a function.\nThis combines two arguments into a single pair.",
      "raw": "uncurry : (a -\u003e b -\u003e c) -\u003e (a,b) -\u003e c",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "c"
        }
      }
    },
    {
      "name": "xor",
      "comment": "The exclusive-or operator. True if exactly one input is True.",
      "raw": "xor : Bool -\u003e Bool -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "|\u003e",
      "comment": "Forward function application `x |\u003e f == f x`. This function is useful\nfor avoiding parenthesis and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n        scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n        ngon 5 30 |\u003e filled blue\n                  |\u003e move (10,10)\n                  |\u003e scale 2",
      "raw": "(|\u003e) : a -\u003e (a -\u003e b) -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      },
      "associativity": "left",
      "precedence": 0
    },
    {
      "name": "||",
      "comment": "The or operator. True if one or both inputs are True.\nThis operator short-circuits if the first argument is True.",
      "raw": "(||) : Bool -\u003e Bool -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      },
      "associativity": "right",
      "precedence": 2
    }
  ]
},
{
  "name": "Bitwise",
  "document": "Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation).\n\n# Basic Operations\n\n@docs and, or, xor, complement\n\n# Bit Shifts\n\n@docs shiftLeft, shiftRight, shiftRightLogical",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "and",
      "comment": "Bitwise AND",
      "raw": "and : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "complement",
      "comment": "Flip each bit individually, often called bitwise NOT",
      "raw": "complement : Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "or",
      "comment": "Bitwise OR",
      "raw": "or : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "shiftLeft",
      "comment": "Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    8 `shiftLeft` 1 == 16\n    8 `shiftLeft` 2 == 32",
      "raw": "shiftLeft : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "shiftRight",
      "comment": "Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n     32 `shiftRight` 1 == 16\n     32 `shiftRight` 2 == 8\n    -32 `shiftRight` 1 == -16\n\nThis is called an [arithmatic right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift),\noften written (\u003e\u003e), and sometimes called a sign-propagating\nright shift because it fills empty spots with copies of the highest bit.",
      "raw": "shiftRight : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "shiftRightLogical",
      "comment": "Shift bits to the right by a given offset, filling new bits with\nzeros.\n\n     32 `shiftRightLogical` 1 == 16\n     32 `shiftRightLogical` 2 == 8\n    -32 `shiftRightLogical` 1 == 2147483632\n\nThis is called an [logical right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift), often written (\u003e\u003e\u003e),\nand sometimes called a zero-fill right shift because it fills empty spots\nwith zeros.",
      "raw": "shiftRightLogical : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "xor",
      "comment": "Bitwise XOR",
      "raw": "xor : Int -\u003e Int -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Char",
  "document": "Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\n# Classification\n@docs isUpper, isLower, isDigit, isOctDigit, isHexDigit\n\n# Conversion\n@docs toUpper, toLower, toLocaleUpper, toLocaleLower, toCode, fromCode",
  "aliases": [
    {
      "name": "KeyCode",
      "comment": "",
      "raw": "type KeyCode = Int",
      "typeVariables": [],
      "type": {
        "tag": "adt",
        "name": "Int",
        "args": []
      }
    }
  ],
  "datatypes": [],
  "values": [
    {
      "name": "fromCode",
      "comment": "Convert from unicode.",
      "raw": "fromCode : KeyCode -\u003e Char",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Char",
          "args": []
        }
      }
    },
    {
      "name": "isDigit",
      "comment": "True for ASCII digits `[0-9]`.",
      "raw": "isDigit : Char -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isHexDigit",
      "comment": "True for ASCII hexadecimal digits `[0-9a-fA-F]`.",
      "raw": "isHexDigit : Char -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isLower",
      "comment": "True for lower case letters.",
      "raw": "isLower : Char -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isOctDigit",
      "comment": "True for ASCII octal digits `[0-7]`.",
      "raw": "isOctDigit : Char -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isUpper",
      "comment": "True for upper case letters.",
      "raw": "isUpper : Char -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "toCode",
      "comment": "Convert to unicode. Used with the [`Keyboard`](/docs/Keyboard.elm)\nlibrary, which expects the input to be uppercase.",
      "raw": "toCode : Char -\u003e KeyCode",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "KeyCode",
          "args": []
        }
      }
    },
    {
      "name": "toLocaleLower",
      "comment": "Convert to lower case, according to any locale-specific case mappings.",
      "raw": "toLocaleLower : Char -\u003e Char",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Char",
          "args": []
        }
      }
    },
    {
      "name": "toLocaleUpper",
      "comment": "Convert to upper case, according to any locale-specific case mappings.",
      "raw": "toLocaleUpper : Char -\u003e Char",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Char",
          "args": []
        }
      }
    },
    {
      "name": "toLower",
      "comment": "Convert to lower case.",
      "raw": "toLower : Char -\u003e Char",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Char",
          "args": []
        }
      }
    },
    {
      "name": "toUpper",
      "comment": "Convert to upper case.",
      "raw": "toUpper : Char -\u003e Char",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Char",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Color",
  "document": "Library for working with colors. Includes\n[RGB](https://en.wikipedia.org/wiki/RGB_color_model) and\n[HSV](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients, and\nbuilt-in names.\n\n# Creation\n@docs rgb, rgba, hsv, hsva, greyscale, grayscale\n\n# From Other Colors\n@docs complement\n\n# Gradients\n@docs linear, radial\n\n# Built-in Colors\nThese colors come from the [Tango\npalette](http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)\nwhich provides aesthetically reasonable defaults for colors. Each color also\ncomes with a light and dark version.\n\n### Standard\n@docs red, orange, yellow, green, blue, purple, brown\n\n### Light\n@docs lightRed, lightOrange, lightYellow, lightGreen, lightBlue, lightPurple,\n    lightBrown\n\n### Dark\n@docs darkRed, darkOrange, darkYellow, darkGreen, darkBlue, darkPurple,\n    darkBrown\n\n### Eight Shades of Grey\nThese colors are a compatible series of shades of grey, fitting nicely\nwith the Tango palette.\n@docs white, lightGrey, grey, darkGrey, lightCharcoal, charcoal, darkCharcoal, black\n\nThese are identical to the *grey* versions. It seems the spelling is regional, but\nthat has never helped me remember which one I should be writing.\n@docs lightGray, gray, darkGray",
  "aliases": [],
  "datatypes": [
    {
      "name": "Color",
      "comment": "",
      "raw": "data Color = Color Int Int Int Float",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Color",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Color",
              "args": []
            }
          }
        }
      ]
    },
    {
      "name": "Gradient",
      "comment": "",
      "raw": "data Gradient\n  = Linear (Float,Float) (Float,Float) [(Float,Color)]\n  | Radial (Float,Float) Float (Float,Float) Float [(Float,Color)]",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Linear",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "_List",
                "args": [
                  {
                    "tag": "adt",
                    "name": "_Tuple2",
                    "args": [
                      {
                        "tag": "adt",
                        "name": "Float",
                        "args": []
                      },
                      {
                        "tag": "adt",
                        "name": "Color",
                        "args": []
                      }
                    ]
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Gradient",
              "args": []
            }
          }
        },
        {
          "name": "Radial",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "_List",
                "args": [
                  {
                    "tag": "adt",
                    "name": "_Tuple2",
                    "args": [
                      {
                        "tag": "adt",
                        "name": "Float",
                        "args": []
                      },
                      {
                        "tag": "adt",
                        "name": "Color",
                        "args": []
                      }
                    ]
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Gradient",
              "args": []
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "black",
      "comment": "",
      "raw": "black         : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "blue",
      "comment": "",
      "raw": "blue   : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "brown",
      "comment": "",
      "raw": "brown  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "charcoal",
      "comment": "",
      "raw": "charcoal      : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "complement",
      "comment": "Produce a &ldquo;complementary color&rdquo;.\nThe two colors will accent each other.",
      "raw": "complement : Color -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "darkBlue",
      "comment": "",
      "raw": "darkBlue   : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkBrown",
      "comment": "",
      "raw": "darkBrown  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkCharcoal",
      "comment": "",
      "raw": "darkCharcoal  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkGray",
      "comment": "",
      "raw": "darkGray  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkGreen",
      "comment": "",
      "raw": "darkGreen  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkGrey",
      "comment": "",
      "raw": "darkGrey      : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkOrange",
      "comment": "",
      "raw": "darkOrange : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkPurple",
      "comment": "",
      "raw": "darkPurple : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkRed",
      "comment": "",
      "raw": "darkRed    : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "darkYellow",
      "comment": "",
      "raw": "darkYellow : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "gray",
      "comment": "",
      "raw": "gray      : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "grayscale",
      "comment": "Produce a gray based on the input. 0 is white, 1 is black.",
      "raw": "grayscale : Float -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "green",
      "comment": "",
      "raw": "green  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "grey",
      "comment": "",
      "raw": "grey          : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "greyscale",
      "comment": "",
      "raw": "greyscale : Float -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "hsv",
      "comment": "Create [HSV colors](http://en.wikipedia.org/wiki/HSL_and_HSV).  This is very\nconvenient for creating colors that cycle and shift.  Hue is an angle and should\nbe given in standard Elm angles (radians).",
      "raw": "hsv : Float -\u003e Float -\u003e Float -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "hsva",
      "comment": "Create [HSV colors](http://en.wikipedia.org/wiki/HSL_and_HSV)\nwith an alpha component for transparency.",
      "raw": "hsva : Float -\u003e Float -\u003e Float -\u003e Float -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "lightBlue",
      "comment": "",
      "raw": "lightBlue   : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightBrown",
      "comment": "",
      "raw": "lightBrown  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightCharcoal",
      "comment": "",
      "raw": "lightCharcoal : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightGray",
      "comment": "",
      "raw": "lightGray : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightGreen",
      "comment": "",
      "raw": "lightGreen  : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightGrey",
      "comment": "",
      "raw": "lightGrey     : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightOrange",
      "comment": "",
      "raw": "lightOrange : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightPurple",
      "comment": "",
      "raw": "lightPurple : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightRed",
      "comment": "",
      "raw": "lightRed    : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "lightYellow",
      "comment": "",
      "raw": "lightYellow : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "linear",
      "comment": "Create a linear gradient. Takes a start and end point and then a series of\n&ldquo;color stops&rdquo; that indicate how to interpolate between the start and\nend points. See [this example](/edit/examples/Elements/LinearGradient.elm) for a\nmore visual explanation.",
      "raw": "linear : (number, number) -\u003e (number, number) -\u003e [(Float,Color)] -\u003e Gradient",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "number"
              },
              {
                "tag": "var",
                "name": "number"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "number"
              },
              {
                "tag": "var",
                "name": "number"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Color",
                    "args": []
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Gradient",
          "args": []
        }
      }
    },
    {
      "name": "orange",
      "comment": "",
      "raw": "orange : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "purple",
      "comment": "",
      "raw": "purple : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "radial",
      "comment": "Create a radial gradient. First takes a start point and inner radius.  Then\ntakes an end point and outer radius. It then takes a series of &ldquo;color\nstops&rdquo; that indicate how to interpolate between the inner and outer\ncircles. See [this example](/edit/examples/Elements/RadialGradient.elm) for a\nmore visual explanation.",
      "raw": "radial : (number,number) -\u003e number -\u003e (number,number) -\u003e number -\u003e [(Float,Color)] -\u003e Gradient",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "number"
              },
              {
                "tag": "var",
                "name": "number"
              }
            ]
          },
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "var",
                "name": "number"
              },
              {
                "tag": "var",
                "name": "number"
              }
            ]
          },
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Color",
                    "args": []
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Gradient",
          "args": []
        }
      }
    },
    {
      "name": "red",
      "comment": "",
      "raw": "red    : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "rgb",
      "comment": "Create RGB colors from numbers between 0 and 255 inclusive.",
      "raw": "rgb : Int -\u003e Int -\u003e Int -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "rgba",
      "comment": "Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1.",
      "raw": "rgba : Int -\u003e Int -\u003e Int -\u003e Float -\u003e Color",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Color",
          "args": []
        }
      }
    },
    {
      "name": "white",
      "comment": "",
      "raw": "white         : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    },
    {
      "name": "yellow",
      "comment": "",
      "raw": "yellow : Color",
      "type": {
        "tag": "adt",
        "name": "Color",
        "args": []
      }
    }
  ]
},
{
  "name": "Date",
  "document": "Library for working with dates. Email the mailing list if you encounter\nissues with internationalization or locale formatting.\n\n# Conversions\n@docs read, toTime, fromTime\n\n# Extractions\n@docs year, month, Month, day, dayOfWeek, Day, hour, minute, second",
  "aliases": [],
  "datatypes": [
    {
      "name": "Date",
      "comment": "",
      "raw": "data Date = Date",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Date",
          "type": {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        }
      ]
    },
    {
      "name": "Day",
      "comment": "Represents the days of the week.",
      "raw": "data Day = Mon | Tue | Wed | Thu | Fri | Sat | Sun",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Mon",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Tue",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Wed",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Thu",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Fri",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Sat",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        },
        {
          "name": "Sun",
          "type": {
            "tag": "adt",
            "name": "Day",
            "args": []
          }
        }
      ]
    },
    {
      "name": "Month",
      "comment": "Represents the month of the year.",
      "raw": "data Month = Jan | Feb | Mar | Apr\n           | May | Jun | Jul | Aug\n           | Sep | Oct | Nov | Dec",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Jan",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Feb",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Mar",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Apr",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "May",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Jun",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Jul",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Aug",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Sep",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Oct",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Nov",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        },
        {
          "name": "Dec",
          "type": {
            "tag": "adt",
            "name": "Month",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "day",
      "comment": "Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.",
      "raw": "day : Date -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "dayOfWeek",
      "comment": "Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the Day `Thu` as defined below.",
      "raw": "dayOfWeek : Date -\u003e Day",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Day",
          "args": []
        }
      }
    },
    {
      "name": "fromTime",
      "comment": "Take a UNIX time and convert it to a `Date`",
      "raw": "fromTime : Time -\u003e Date",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Date",
          "args": []
        }
      }
    },
    {
      "name": "hour",
      "comment": "Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.",
      "raw": "hour : Date -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "minute",
      "comment": "Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.",
      "raw": "minute : Date -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "month",
      "comment": "Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the Month `Jun` as defined below.",
      "raw": "month : Date -\u003e Month",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Month",
          "args": []
        }
      }
    },
    {
      "name": "read",
      "comment": "Attempt to read a date from a string.",
      "raw": "read : String -\u003e Maybe Date",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "Date",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "second",
      "comment": "Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.",
      "raw": "second : Date -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "toTime",
      "comment": "Convert a date into a time since midnight (UTC) of 1 January 1990 (i.e.\n[UNIX time](http://en.wikipedia.org/wiki/Unix_time)). Given the date 23 June\n1990 at 11:45AM this returns the corresponding time.",
      "raw": "toTime : Date -\u003e Time",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Time",
          "args": []
        }
      }
    },
    {
      "name": "year",
      "comment": "Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.",
      "raw": "year : Date -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Date",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Debug",
  "document": "This library is for investigating bugs or performance problems. It should\n*not* be used in production code.",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "log",
      "comment": "Log a tagged value on the developer console, and then return the value.\n\n      1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n      length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.",
      "raw": "log : String -\u003e a -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    }
  ]
},
{
  "name": "Dict",
  "document": "A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs member, lookup, findWithDefault\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "diff",
      "comment": "Keep a key-value pair when its key does not appear in the second dictionary.\nPreference is given to the first dictionary.",
      "raw": "diff : Dict comparable v -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "empty",
      "comment": "Create an empty dictionary.",
      "raw": "empty : Dict comparable v",
      "type": {
        "tag": "adt",
        "name": "Dict",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "v"
          }
        ]
      }
    },
    {
      "name": "findWithDefault",
      "comment": "Find the value associated with a key. If the key is not found,\nreturn the default value.",
      "raw": "findWithDefault : v -\u003e comparable -\u003e Dict comparable v -\u003e v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "v"
          },
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "v"
        }
      }
    },
    {
      "name": "foldl",
      "comment": "Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.",
      "raw": "foldl : (comparable -\u003e v -\u003e b -\u003e b) -\u003e b -\u003e Dict comparable v -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldr",
      "comment": "Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.",
      "raw": "foldr : (comparable -\u003e v -\u003e b -\u003e b) -\u003e b -\u003e Dict comparable v -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "fromList",
      "comment": "Convert an association list into a dictionary.",
      "raw": "fromList : [(comparable,v)] -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "var",
                    "name": "comparable"
                  },
                  {
                    "tag": "var",
                    "name": "v"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "insert",
      "comment": "Insert a key-value pair into a dictionary. Replaces value when there is\na collision.",
      "raw": "insert : comparable -\u003e v -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "v"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "intersect",
      "comment": "Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.",
      "raw": "intersect : Dict comparable v -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "keys",
      "comment": "Get all of the keys in a dictionary.",
      "raw": "keys : Dict comparable v -\u003e [comparable]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "lookup",
      "comment": "Lookup the value associated with a key.",
      "raw": "lookup : comparable -\u003e Dict comparable v -\u003e Maybe v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "map",
      "comment": "Apply a function to all values in a dictionary.",
      "raw": "map : (a -\u003e b) -\u003e Dict comparable a -\u003e Dict comparable b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "member",
      "comment": "Determine if a key is in a dictionary.",
      "raw": "member : comparable -\u003e Dict comparable v -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "remove",
      "comment": "Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.",
      "raw": "remove : comparable -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "singleton",
      "comment": "Create a dictionary with one key-value pair.",
      "raw": "singleton : comparable -\u003e v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "var",
            "name": "v"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "toList",
      "comment": "Convert a dictionary into an association list of key-value pairs.",
      "raw": "toList : Dict comparable v -\u003e [(comparable,v)]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "var",
                  "name": "comparable"
                },
                {
                  "tag": "var",
                  "name": "v"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "union",
      "comment": "Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.",
      "raw": "union : Dict comparable v -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "update",
      "comment": "Update the value of a dictionary for a specific key with a given function.",
      "raw": "update : comparable -\u003e (Maybe v -\u003e Maybe v) -\u003e Dict comparable v -\u003e Dict comparable v",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Maybe",
                "args": [
                  {
                    "tag": "var",
                    "name": "v"
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Maybe",
              "args": [
                {
                  "tag": "var",
                  "name": "v"
                }
              ]
            }
          },
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dict",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            },
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    },
    {
      "name": "values",
      "comment": "Get all of the values in a dictionary.",
      "raw": "values : Dict comparable v -\u003e [v]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Dict",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "v"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "v"
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Either",
  "document": "Represents any data that can take two different types.\n\n# Type and Constructors\n@docs Either\n\n# Taking Eithers apart\n@docs either, isLeft, isRight\n\n# Eithers and Lists\n@docs lefts, rights, partition",
  "aliases": [],
  "datatypes": [
    {
      "name": "Either",
      "comment": "Represents any data may take two forms. For example, a user ID may be\neither an `Int` or a `String`.\n\nThis can also be used for error handling `(Either String a)` where\nerror messages are stored on the left, and the correct values\n(&ldquo;right&rdquo; values) are stored on the right.",
      "raw": "data Either a b = Left a | Right b",
      "typeVariables": [
        "a",
        "b"
      ],
      "constructors": [
        {
          "name": "Left",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Either",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                },
                {
                  "tag": "var",
                  "name": "b"
                }
              ]
            }
          }
        },
        {
          "name": "Right",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Either",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                },
                {
                  "tag": "var",
                  "name": "b"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "either",
      "comment": "Apply the first function to a `Left` and the second function to a `Right`.\nThis allows the extraction of a value from an `Either`.\n\n      either (\\n -\u003e n + 1) sqrt (Left  4) == 5\n      either (\\n -\u003e n + 1) sqrt (Right 4) == 2\n\n      map : (a -\u003e b) -\u003e Either err a -\u003e Either err b\n      map f e = either Left (\\x -\u003e Right (f x)) e",
      "raw": "either : (a -\u003e c) -\u003e (b -\u003e c) -\u003e Either a b -\u003e c",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "adt",
            "name": "Either",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "c"
        }
      }
    },
    {
      "name": "isLeft",
      "comment": "True if the value is a `Left`.\n\n      isLeft (Left \"Cat\") == True\n      isLeft (Right 1123) == False",
      "raw": "isLeft : Either a b -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Either",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isRight",
      "comment": "True if the value is a `Right`.\n\n      isRight (Left \"Cat\") == False\n      isRight (Right 1123) == True",
      "raw": "isRight : Either a b -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Either",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "lefts",
      "comment": "Keep only the values held in `Left` values.\n\n      lefts [Left 3, Right 'a', Left 5, Right \"eight\"] == [3,5]",
      "raw": "lefts : [Either a b] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Either",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  },
                  {
                    "tag": "var",
                    "name": "b"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "partition",
      "comment": "Split into two lists, lefts on the left and rights on the right. So we\nhave the equivalence: `(partition es == (lefts es, rights es))`\n\n      partition [Left 3, Right 'a', Left 5, Right 'b'] == ([3,5],['a','b'])",
      "raw": "partition : [Either a b] -\u003e ([a],[b])",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Either",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  },
                  {
                    "tag": "var",
                    "name": "b"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            },
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "b"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "rights",
      "comment": "Keep only the values held in `Right` values.\n\n      rights [Left 3, Right 'a', Left 5, Right 'b'] == ['a','b']",
      "raw": "rights : [Either a b] -\u003e [b]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Either",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  },
                  {
                    "tag": "var",
                    "name": "b"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Http",
  "document": "A library for asynchronous HTTP requests. See the\n[WebSocket](http://elm-lang.org/docs/WebSocket.elm) library if\nyou have very strict latency requirements.\n\n# Sending Requests\n@docs send, sendGet\n\n# Creating Requests\n@docs get, post, request\n\n# Responses\n@docs Response",
  "aliases": [
    {
      "name": "Request",
      "comment": "",
      "raw": "type Request a = {\n  verb : String,\n  url  : String,\n  body : a,\n  headers : [(String,String)]\n }",
      "typeVariables": [
        "a"
      ],
      "type": {
        "tag": "record",
        "fields": [
          [
            "verb",
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ],
          [
            "url",
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ],
          [
            "body",
            {
              "tag": "var",
              "name": "a"
            }
          ],
          [
            "headers",
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "adt",
                  "name": "_Tuple2",
                  "args": [
                    {
                      "tag": "adt",
                      "name": "String",
                      "args": []
                    },
                    {
                      "tag": "adt",
                      "name": "String",
                      "args": []
                    }
                  ]
                }
              ]
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "Response",
      "comment": "The datatype for responses. Success contains only the returned message.\nFailures contain both an error code and an error message.",
      "raw": "data Response a = Success a | Waiting | Failure Int String",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "Success",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Response",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        },
        {
          "name": "Waiting",
          "type": {
            "tag": "adt",
            "name": "Response",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        },
        {
          "name": "Failure",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Response",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "get",
      "comment": "Create a GET request to the given url.",
      "raw": "get : String -\u003e Request String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Request",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "post",
      "comment": "Create a POST request to the given url, carrying the given data.",
      "raw": "post : String -\u003e String -\u003e Request String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Request",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "request",
      "comment": "Create a customized request. Arguments are request type (get, post, put,\ndelete, etc.), target url, data, and a list of additional headers.",
      "raw": "request : String -\u003e String -\u003e String -\u003e [(String,String)] -\u003e Request String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "String",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "String",
                    "args": []
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Request",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "send",
      "comment": "Performs an HTTP request with the given requests. Produces a signal\nthat carries the responses.",
      "raw": "send : Signal (Request a) -\u003e Signal (Response String)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "Request",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Response",
              "args": [
                {
                  "tag": "adt",
                  "name": "String",
                  "args": []
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "sendGet",
      "comment": "Performs an HTTP GET request with the given urls. Produces a signal\nthat carries the responses.",
      "raw": "sendGet : Signal String -\u003e Signal (Response String)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Response",
              "args": [
                {
                  "tag": "adt",
                  "name": "String",
                  "args": []
                }
              ]
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "JavaScript",
  "document": "This library does basic conversions between Elm and JS values. This allows\nthe internal data structures of Elm to change and improve with no impact on JS\nintegration.\n\nIt is intended to be imported as `import JavaScript as JS`. That way functions\nlike `JS.toInt` convert JavaScript *to* Elm integers and functions like\n`JS.fromString` gets JavaScript *from* Elm strings.\n\n# Javascript to Elm\n@docs toString, toInt, toFloat, toBool, toList\n\n# JavaScript from Elm\n@docs fromString, fromInt, fromFloat, fromBool, fromList",
  "aliases": [],
  "datatypes": [
    {
      "name": "JSArray",
      "comment": "",
      "raw": "data JSArray a = JSArray a",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "JSArray",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JSArray",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "JSBool",
      "comment": "",
      "raw": "data JSBool = JSBool",
      "typeVariables": [],
      "constructors": [
        {
          "name": "JSBool",
          "type": {
            "tag": "adt",
            "name": "JSBool",
            "args": []
          }
        }
      ]
    },
    {
      "name": "JSDomNode",
      "comment": "",
      "raw": "data JSDomNode = JSDomNode",
      "typeVariables": [],
      "constructors": [
        {
          "name": "JSDomNode",
          "type": {
            "tag": "adt",
            "name": "JSDomNode",
            "args": []
          }
        }
      ]
    },
    {
      "name": "JSNumber",
      "comment": "",
      "raw": "data JSNumber = JSNumber",
      "typeVariables": [],
      "constructors": [
        {
          "name": "JSNumber",
          "type": {
            "tag": "adt",
            "name": "JSNumber",
            "args": []
          }
        }
      ]
    },
    {
      "name": "JSObject",
      "comment": "",
      "raw": "data JSObject = JSObject",
      "typeVariables": [],
      "constructors": [
        {
          "name": "JSObject",
          "type": {
            "tag": "adt",
            "name": "JSObject",
            "args": []
          }
        }
      ]
    },
    {
      "name": "JSString",
      "comment": "",
      "raw": "data JSString = JSString",
      "typeVariables": [],
      "constructors": [
        {
          "name": "JSString",
          "type": {
            "tag": "adt",
            "name": "JSString",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "fromBool",
      "comment": "",
      "raw": "fromBool : Bool -\u003e JSBool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSBool",
          "args": []
        }
      }
    },
    {
      "name": "fromFloat",
      "comment": "",
      "raw": "fromFloat : Float -\u003e JSNumber",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSNumber",
          "args": []
        }
      }
    },
    {
      "name": "fromInt",
      "comment": "",
      "raw": "fromInt : Int -\u003e JSNumber",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSNumber",
          "args": []
        }
      }
    },
    {
      "name": "fromList",
      "comment": "Produces a uniform JavaScript array with all members of the same type.",
      "raw": "fromList : [a] -\u003e JSArray a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSArray",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "fromString",
      "comment": "",
      "raw": "fromString : String -\u003e JSString",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSString",
          "args": []
        }
      }
    },
    {
      "name": "toBool",
      "comment": "",
      "raw": "toBool : JSBool -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSBool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "toFloat",
      "comment": "",
      "raw": "toFloat : JSNumber -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSNumber",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "toInt",
      "comment": "",
      "raw": "toInt : JSNumber -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSNumber",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "toList",
      "comment": "Requires that the input array be uniform (all members have the same type)",
      "raw": "toList : JSArray a -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSArray",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "toString",
      "comment": "",
      "raw": "toString : JSString -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSString",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Json",
  "document": "Library for working with [JSON](https://en.wikipedia.org/wiki/JSON) values.\n\n# Json Values\n@docs JsonValue\n\n# Strings\n@docs fromString, toString\n\n# JS Strings\n@docs fromJSString, toJSString\n\n# JS Objects\n@docs fromJSObject, toJSObject",
  "aliases": [],
  "datatypes": [
    {
      "name": "JsonValue",
      "comment": "This datatype can represent all valid values that can be held in a JSON\nobject. In Elm, a proper JSON object is represented as a (Dict String JsonValue)\nwhich is a mapping from strings to Json Values.",
      "raw": "data JsonValue\n    = String String\n    | Number Float\n    | Boolean Bool\n    | Null\n    | Array [JsonValue]\n    | Object (Dict.Dict String JsonValue)",
      "typeVariables": [],
      "constructors": [
        {
          "name": "String",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          }
        },
        {
          "name": "Number",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          }
        },
        {
          "name": "Boolean",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          }
        },
        {
          "name": "Null",
          "type": {
            "tag": "adt",
            "name": "JsonValue",
            "args": []
          }
        },
        {
          "name": "Array",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "_List",
                "args": [
                  {
                    "tag": "adt",
                    "name": "JsonValue",
                    "args": []
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          }
        },
        {
          "name": "Object",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Dict.Dict",
                "args": [
                  {
                    "tag": "adt",
                    "name": "String",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "JsonValue",
                    "args": []
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "fromJSObject",
      "comment": "Convert a JS object into a `JsonValue`.",
      "raw": "fromJSObject : JSObject -\u003e JsonValue",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSObject",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JsonValue",
          "args": []
        }
      }
    },
    {
      "name": "fromJSString",
      "comment": "Parse a JavaScript string representation of a proper JSON object into\nits Elm representation.",
      "raw": "fromJSString : JSString -\u003e Maybe JsonValue",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSString",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "fromString",
      "comment": "Parse a string representation of a proper JSON object into\nits Elm representation.",
      "raw": "fromString : String -\u003e Maybe JsonValue",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "JsonValue",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "toJSObject",
      "comment": "Convert a `JsonValue` into a `JSObject`. Paired with the\n[`JavaScript.Experimental` library](/docs/JavaScript/Experimental.elm),\nThis lets you convert strings into Elm records:\n\n       import JavaScript.Experimental as JS\n\n       stringToRecord str =\n           case fromString str of\n             Just jsonValue -\u003e Just (JS.toRecord (toJSObject jsonValue))\n             Nothing -\u003e Nothing",
      "raw": "toJSObject : JsonValue -\u003e JSObject",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JsonValue",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSObject",
          "args": []
        }
      }
    },
    {
      "name": "toJSString",
      "comment": "Convert a proper JSON object into a JavaScript string.\nNote that the type JSString seen here is not the same as the type constructor\nJsonString used elsewhere in this module.",
      "raw": "toJSString : String -\u003e JsonValue -\u003e JSString",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "JsonValue",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSString",
          "args": []
        }
      }
    },
    {
      "name": "toString",
      "comment": "Convert a `JsonValue` into a prettified string.\nThe first argument is a separator token (e.g. \\\" \\\", \\\"\\\\n\\\", etc.) that will\nbe used for indentation in the prettified string version of the JSON.",
      "raw": "toString : String -\u003e JsonValue -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "JsonValue",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Keyboard",
  "document": "Library for working with keyboard input.\n\n# Representing Keys\n@docs KeyCode\n\n# Directions\n@docs arrows, wasd, directions\n\n# Specific Keys\n@docs shift, enter, space, ctrl\n\n# General Keypresses\n@docs isDown, keysDown, lastPressed",
  "aliases": [
    {
      "name": "KeyCode",
      "comment": "Type alias to make it clearer what integers are supposed to represent\nin this library. Use [`Char.toCode`](docs/Char.elm#toCode) and\n[`Char.fromCode`](/docs/Char.elm#fromCode) to convert key codes to characters.\nUse the uppercase character with `toCode`.",
      "raw": "type KeyCode = Int",
      "typeVariables": [],
      "type": {
        "tag": "adt",
        "name": "Int",
        "args": []
      }
    }
  ],
  "datatypes": [],
  "values": [
    {
      "name": "arrows",
      "comment": "A signal of records indicating which arrow keys are pressed.\n\n`{ x = 0, y = 0 }` when pressing no arrows.\u003cbr\u003e\n`{ x =-1, y = 0 }` when pressing the left arrow.\u003cbr\u003e\n`{ x = 1, y = 1 }` when pressing the up and right arrows.\u003cbr\u003e\n`{ x = 0, y =-1 }` when pressing the down, left, and right arrows.",
      "raw": "arrows : Signal { x:Int, y:Int }",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "record",
            "fields": [
              [
                "x",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ],
              [
                "y",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ]
            ],
            "extension": null
          }
        ]
      }
    },
    {
      "name": "ctrl",
      "comment": "Whether the control key is pressed.",
      "raw": "ctrl : Signal Bool",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ]
      }
    },
    {
      "name": "directions",
      "comment": "Custom key directions to support different locales. The order is up, down,\nleft, right.",
      "raw": "directions : KeyCode -\u003e KeyCode -\u003e KeyCode -\u003e KeyCode -\u003e Signal { x:Int, y:Int }",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          },
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          },
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          },
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "record",
              "fields": [
                [
                  "x",
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  }
                ],
                [
                  "y",
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  }
                ]
              ],
              "extension": null
            }
          ]
        }
      }
    },
    {
      "name": "enter",
      "comment": "Whether the enter key is pressed.",
      "raw": "enter : Signal Bool",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ]
      }
    },
    {
      "name": "isDown",
      "comment": "Whether an arbitrary key is pressed.",
      "raw": "isDown : KeyCode -\u003e Signal Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "keysDown",
      "comment": "List of keys that are currently down.",
      "raw": "keysDown : Signal [KeyCode]",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "KeyCode",
                "args": []
              }
            ]
          }
        ]
      }
    },
    {
      "name": "lastPressed",
      "comment": "The latest key that has been pressed.",
      "raw": "lastPressed : Signal KeyCode",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "KeyCode",
            "args": []
          }
        ]
      }
    },
    {
      "name": "shift",
      "comment": "Whether the shift key is pressed.",
      "raw": "shift : Signal Bool",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ]
      }
    },
    {
      "name": "space",
      "comment": "Whether the space key is pressed.",
      "raw": "space : Signal Bool",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ]
      }
    },
    {
      "name": "wasd",
      "comment": "Just like the arrows signal, but this uses keys w, a, s, and d,\nwhich are common controls for many computer games.",
      "raw": "wasd : Signal { x:Int, y:Int }",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "record",
            "fields": [
              [
                "x",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ],
              [
                "y",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ]
            ],
            "extension": null
          }
        ]
      }
    }
  ]
},
{
  "name": "List",
  "document": "A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\n# Basics\n@docs (::), (++), isEmpty, length, reverse, map\n\n# Sub-lists\n@docs head, tail, last, filter, take, drop\n\n# Putting Lists Together\n@docs concat, concatMap, join, intersperse, zip, zipWith, repeat\n\n# Taking Lists Apart\n@docs partition, unzip\n\n# Folds\n@docs foldr, foldl, foldr1, foldl1, scanl, scanl1\n\n# Special Folds\n@docs sum, product, maximum, minimum, all, any, and, or\n\n# Sorting\n@docs sort, sortBy, sortWith",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "++",
      "comment": "Puts two appendable things together:\n\n      [1,1] ++ [2,3] == [1,1,2,3]\n      \"abc\" ++ \"123\" == \"abc123\"",
      "raw": "(++) : appendable -\u003e appendable -\u003e appendable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "appendable"
          },
          {
            "tag": "var",
            "name": "appendable"
          }
        ],
        "result": {
          "tag": "var",
          "name": "appendable"
        }
      },
      "associativity": "right",
      "precedence": 5
    },
    {
      "name": "::",
      "comment": "Add an element to the front of a list `(1 :: [2,3] == [1,2,3])`",
      "raw": "(::) : a -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      },
      "associativity": "right",
      "precedence": 5
    },
    {
      "name": "all",
      "comment": "Check to see if all elements satisfy the predicate.",
      "raw": "all : (a -\u003e Bool) -\u003e [a] -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "and",
      "comment": "Check to see if all elements are True.",
      "raw": "and : [Bool] -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "any",
      "comment": "Check to see if any elements satisfy the predicate.",
      "raw": "any : (a -\u003e Bool) -\u003e [a] -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "concat",
      "comment": "Concatenate a list of appendable things:\n\n      concat [[1,2],[3],[4,5]] == [1,2,3,4,5]\n      concat [\"tree\",\"house\"]  == \"treehouse\"",
      "raw": "concat : [appendable] -\u003e appendable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "appendable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "appendable"
        }
      }
    },
    {
      "name": "concatMap",
      "comment": "Map a given function onto a list and flatten the resulting lists.\n\n      concatMap f xs == concat (map f xs)",
      "raw": "concatMap : (a -\u003e appendable) -\u003e [a] -\u003e appendable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "appendable"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "appendable"
        }
      }
    },
    {
      "name": "drop",
      "comment": "Drop the first n members of a list: `(drop 2 [1,2,3,4] == [3,4])`",
      "raw": "drop : Int -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "filter",
      "comment": "Keep only elements that satisfy the predicate:\n`(filter isEven [1..6] == [2,4,6])`",
      "raw": "filter : (a -\u003e Bool) -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "foldl",
      "comment": "Reduce a list from the left: `(foldl (::) [] [1,2,3] == [3,2,1])`",
      "raw": "foldl : (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldl1",
      "comment": "Reduce a list from the left without a base case. List must be non-empty.",
      "raw": "foldl1 : (a -\u003e a -\u003e a) -\u003e [a] -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "foldr",
      "comment": "Reduce a list from the right: `(foldr (+) 0 [1,2,3] == 6)`",
      "raw": "foldr : (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldr1",
      "comment": "Reduce a list from the right without a base case. List must be non-empty.",
      "raw": "foldr1 : (a -\u003e a -\u003e a) -\u003e [a] -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "head",
      "comment": "Extract the first element of a list. List must be non-empty.\n`(head [1,2,3] == 1)`",
      "raw": "head : [a] -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "intersperse",
      "comment": "Places the given value between all members of the given list.\n\n      intersperse \"on\" [\"turtles\",\"turtles\",\"turtles\"] == [\"turtles\",\"on\",\"turtles\",\"on\",\"turtles\"]",
      "raw": "intersperse : a -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "isEmpty",
      "comment": "Check if a list is empty `(isEmpty [] == True)`",
      "raw": "isEmpty : [a] -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "join",
      "comment": "Places the given value between all of the lists in the second\nargument and concatenates the result.\n\n      join \"a\" [\"H\",\"w\",\"ii\",\"n\"] == \"Hawaiian\"",
      "raw": "join : appendable -\u003e [appendable] -\u003e appendable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "appendable"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "appendable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "appendable"
        }
      }
    },
    {
      "name": "last",
      "comment": "Extract the last element of a list. List must be non-empty.\n`(last [1,2,3] == 3)`",
      "raw": "last : [a] -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    },
    {
      "name": "length",
      "comment": "Determine the length of a list: `(length [1,2,3] == 3)`",
      "raw": "length : [a] -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "map",
      "comment": "Apply a function to every element of a list: `(map sqrt [1,4,9] == [1,2,3])`",
      "raw": "map : (a -\u003e b) -\u003e [a] -\u003e [b]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "maximum",
      "comment": "Find the maximum element in a non-empty list: `maximum [1,4,2] == 4`",
      "raw": "maximum : [comparable] -\u003e comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "comparable"
        }
      }
    },
    {
      "name": "minimum",
      "comment": "Find the minimum element in a non-empty list: `minimum [3,2,1] == 1`",
      "raw": "minimum : [comparable] -\u003e comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "comparable"
        }
      }
    },
    {
      "name": "or",
      "comment": "Check to see if any elements are True.",
      "raw": "or : [Bool] -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "partition",
      "comment": "Split a list based on the predicate.",
      "raw": "partition : (a -\u003e Bool) -\u003e [a] -\u003e ([a],[a])",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            },
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "product",
      "comment": "Get the product of the list elements. `(product [1..4] == 24)`",
      "raw": "product : [number] -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "number"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "repeat",
      "comment": "Creates a list with *n* copies of a value:\n`(repeat 3 (0,0) == [(0,0),(0,0),(0,0)]`",
      "raw": "repeat : Int -\u003e a -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "reverse",
      "comment": "Reverse a list. `(reverse [1..4] == [4,3,2,1])`",
      "raw": "reverse : [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "scanl",
      "comment": "Reduce a list from the left, building up all of the intermediate results into a list.\n\n      scanl (+) 0 [1,2,3,4] == [0,1,3,6,10]",
      "raw": "scanl : (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e [b]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "scanl1",
      "comment": "Same as scanl but it doesn't require a base case. List must be non-empty.\n\n      scanl1 (+) [1,2,3,4] == [1,3,6,10]",
      "raw": "scanl1 : (a -\u003e a -\u003e a) -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "sort",
      "comment": "Sort values from lowest to highest: `sort [3,1,5] == [1,3,5]`",
      "raw": "sort : [comparable] -\u003e [comparable]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "sortBy",
      "comment": "Sort values by a derived property.\n\n```haskell\nalice = { name=\"Alice\", height=1.62 }\nbob   = { name=\"Bob\"  , height=1.85 }\nchuck = { name=\"Chuck\", height=1.76 }\n\nsortBy .name   [chuck,alice,bob] == [alice,bob,chuck]\nsortBy .height [chuck,alice,bob] == [alice,chuck,bob]\n\nsortBy String.length [\"mouse\",\"cat\"] == [\"cat\",\"mouse\"]\n```",
      "raw": "sortBy : (a -\u003e comparable) -\u003e  [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "comparable"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "sortWith",
      "comment": "Sort values with a custom comparison function.\n\n```haskell\nsortWith flippedComparison [1..5] == [5,4,3,2,1]\n\nflippedComparison a b =\n     case compare a b of\n       LT -\u003e GT\n       EQ -\u003e EQ\n       GT -\u003e LT\n```\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`",
      "raw": "sortWith : (a -\u003e a -\u003e Order) -\u003e  [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Order",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "sum",
      "comment": "Get the sum of the list elements. `(sum [1..4] == 10)`",
      "raw": "sum : [number] -\u003e number",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "number"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "number"
        }
      }
    },
    {
      "name": "tail",
      "comment": "Extract the elements after the head of the list. List must be non-empty.\n`(tail [1,2,3] == [2,3])`",
      "raw": "tail : [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "take",
      "comment": "Take the first n members of a list: `(take 2 [1,2,3,4] == [1,2])`",
      "raw": "take : Int -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "unzip",
      "comment": "Decompose a list of tuples.",
      "raw": "unzip : [(a,b)] -\u003e ([a],[b])",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  },
                  {
                    "tag": "var",
                    "name": "b"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            },
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "b"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "zip",
      "comment": "Combine two lists, combining them into tuples pairwise.\nIf one list is longer, the extra elements are dropped.\n\n      zip [1,2,3] [6,7] == [(1,6),(2,7)]\n      zip == zipWith (,)",
      "raw": "zip : [a] -\u003e [b] -\u003e [(a,b)]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                },
                {
                  "tag": "var",
                  "name": "b"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "zipWith",
      "comment": "Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n      zipWith (+) [1,2,3] [1,2,3,4] == [2,4,6]",
      "raw": "zipWith : (a -\u003e b -\u003e c) -\u003e [a] -\u003e [b] -\u003e [c]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "c"
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Maybe",
  "document": "Represents an optional value. Maybe it is there, maybe it is not.\n\n# Type and Constructors\n@docs Maybe\n\n# Taking Maybes apart\n@docs maybe, isJust, isNothing\n\n# Maybes and Lists\n@docs justs",
  "aliases": [],
  "datatypes": [
    {
      "name": "Maybe",
      "comment": "The Maybe datatype. Useful when a computation may or may not\nresult in a value (e.g. logarithm is defined only for positive\nnumbers).",
      "raw": "data Maybe a = Just a | Nothing",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "Just",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Maybe",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        },
        {
          "name": "Nothing",
          "type": {
            "tag": "adt",
            "name": "Maybe",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "cons",
      "comment": "",
      "raw": "cons : Maybe a -\u003e [a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Maybe",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "isJust",
      "comment": "Check if a maybe happens to be a `Just`.\n\n      isJust (Just 42) == True\n      isJust (Just []) == True\n      isJust Nothing   == False",
      "raw": "isJust : Maybe a -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Maybe",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "isNothing",
      "comment": "Check if constructed with `Nothing`.\n\n      isNothing (Just 42) == False\n      isNothing (Just []) == False\n      isNothing Nothing   == True",
      "raw": "isNothing : Maybe a -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Maybe",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "justs",
      "comment": "Filters out Nothings and extracts the remaining values.\n\n      justs [Just 0, Nothing, Just 5, Just 7] == [0,5,7]",
      "raw": "justs : [Maybe a] -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Maybe",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "maybe",
      "comment": "Provide a default value and a function to extract the contents of a `Maybe`.\nWhen given `Nothing` you get the default, when given a `Just` you apply the\nfunction to the associated value.\n\n      isPositive : Maybe Int -\u003e Bool\n      isPositive maybeInt = maybe False (\\n -\u003e n \u003e 0) maybeInt\n\n      map : (a -\u003e b) -\u003e Maybe a -\u003e Maybe b\n      map f m = maybe Nothing (\\x -\u003e Just (f x)) m",
      "raw": "maybe : b -\u003e (a -\u003e b) -\u003e Maybe a -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "adt",
            "name": "Maybe",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    }
  ]
},
{
  "name": "Mouse",
  "document": "Library for working with mouse input.\n\n# Position\n@docs position, x, y\n\n# Button Status\n@docs isDown, clicks",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "clicks",
      "comment": "Always equal to unit. Event triggers on every mouse click.",
      "raw": "clicks : Signal ()",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple0",
            "args": []
          }
        ]
      }
    },
    {
      "name": "isDown",
      "comment": "The current state of the left mouse-button.\nTrue when the button is down, and false otherwise.",
      "raw": "isDown : Signal Bool",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ]
      }
    },
    {
      "name": "position",
      "comment": "The current mouse position.",
      "raw": "position : Signal (Int,Int)",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          }
        ]
      }
    },
    {
      "name": "x",
      "comment": "The current x-coordinate of the mouse.",
      "raw": "x : Signal Int",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ]
      }
    },
    {
      "name": "y",
      "comment": "The current y-coordinate of the mouse.",
      "raw": "y : Signal Int",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ]
      }
    }
  ]
},
{
  "name": "Random",
  "document": "Since the core of Elm is pure, randomness must be handled via signals.\n\n# Random Numbers\n@docs range, float, floatList",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "float",
      "comment": "Produces a new signal that changes whenever the input signal changes.\nThe new values are random numbers in [0..1).",
      "raw": "float : Signal a -\u003e Signal Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "floatList",
      "comment": "Produces a new signal of lists that changes whenever the input signal\nchanges. The input signal specifies the length of the random list. Each value is\na random number in [0..1).",
      "raw": "floatList : Signal Int -\u003e Signal [Float]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "adt",
                  "name": "Float",
                  "args": []
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "range",
      "comment": "Given a range from low to high and a signal of values, this produces\na new signal that changes whenever the input signal changes. The new\nvalues are random number between 'low' and 'high' inclusive.",
      "raw": "range : Int -\u003e Int -\u003e Signal a -\u003e Signal Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Regex",
  "document": "A library for working with regular expressions. It uses [the\nsame kind of regular expressions accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n# Create\n@docs regex, escape, caseInsensitive\n\n# Helpful Data Structures\n\nThese data structures are needed to help define functions like [`find`](#find)\nand [`replace`](#replace).\n\n@docs HowMany, Match\n\n# Use\n@docs contains, find, replace, split",
  "aliases": [
    {
      "name": "Match",
      "comment": "A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n  * `submatches` &mdash; a regex might have [subpatterns, surrounded by\n    parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n  * `index` &mdash; the index of the match in the original string.\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.",
      "raw": "type Match = { match : String, submatches : [Maybe String], index : Int, number : Int }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "match",
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ],
          [
            "submatches",
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "adt",
                  "name": "Maybe",
                  "args": [
                    {
                      "tag": "adt",
                      "name": "String",
                      "args": []
                    }
                  ]
                }
              ]
            }
          ],
          [
            "index",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "number",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "HowMany",
      "comment": "`HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).",
      "raw": "data HowMany = All | AtMost Int",
      "typeVariables": [],
      "constructors": [
        {
          "name": "All",
          "type": {
            "tag": "adt",
            "name": "HowMany",
            "args": []
          }
        },
        {
          "name": "AtMost",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "HowMany",
              "args": []
            }
          }
        }
      ]
    },
    {
      "name": "Regex",
      "comment": "",
      "raw": "data Regex = Regex",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Regex",
          "type": {
            "tag": "adt",
            "name": "Regex",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "caseInsensitive",
      "comment": "Make a regex case insensitive",
      "raw": "caseInsensitive : Regex -\u003e Regex",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Regex",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Regex",
          "args": []
        }
      }
    },
    {
      "name": "contains",
      "comment": "Check to see if a Regex is contained in a string.\n\n```haskell\n  contains (regex \"123\") \"12345\" == True\n  contains (regex \"b+\") \"aabbcc\" == True\n\n  contains (regex \"789\") \"12345\" == False\n  contains (regex \"z+\") \"aabbcc\" == False\n```",
      "raw": "contains : Regex -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Regex",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "escape",
      "comment": "Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.",
      "raw": "escape : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "find",
      "comment": "Find matches in a string:\n\n```haskell\n  findTwoCommas = find (AtMost 2) (regex \",\")\n\n    -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n    -- map .index (findTwoCommas \"a b c d e\") == []\n\n  places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n    -- map .match places == [\"on a boat\", \"in a lake\"]\n    -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n```",
      "raw": "find : HowMany -\u003e Regex -\u003e String -\u003e [Match]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "HowMany",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Regex",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "Match",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "regex",
      "comment": "Create a Regex that matches patterns [as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.",
      "raw": "regex : String -\u003e Regex",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Regex",
          "args": []
        }
      }
    },
    {
      "name": "replace",
      "comment": "Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n```haskell\n  devowel = replace All (regex \"[aeiou]\") (\\_ -\u003e \"\")\n\n    -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n  reverseWords = replace All (regex \"\\\\w+\") (\\{match} -\u003e String.reverse match)\n\n    -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n```",
      "raw": "replace : HowMany -\u003e Regex -\u003e (Match -\u003e String) -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "HowMany",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Regex",
            "args": []
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Match",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "split",
      "comment": "Split a string, using the regex as the separator.\n\n```haskell\n  split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n  split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n```",
      "raw": "split : HowMany -\u003e Regex -\u003e String -\u003e [String]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "HowMany",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Regex",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Set",
  "document": "A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs member\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "diff",
      "comment": "Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.",
      "raw": "diff : Set comparable -\u003e Set comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "empty",
      "comment": "Create an empty set.",
      "raw": "empty : Set comparable",
      "type": {
        "tag": "adt",
        "name": "Set",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          }
        ]
      }
    },
    {
      "name": "foldl",
      "comment": "Fold over the values in a set, in order from lowest to highest.",
      "raw": "foldl : (comparable -\u003e b -\u003e b) -\u003e b -\u003e Set comparable -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldr",
      "comment": "Fold over the values in a set, in order from highest to lowest.",
      "raw": "foldr : (comparable -\u003e b -\u003e b) -\u003e b -\u003e Set comparable -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "fromList",
      "comment": "Convert a list into a set, removing any duplicates.",
      "raw": "fromList : [comparable] -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "insert",
      "comment": "Insert a value into a set.",
      "raw": "insert : comparable -\u003e Set comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "intersect",
      "comment": "Get the intersection of two sets. Keeps values that appear in both sets.",
      "raw": "intersect : Set comparable -\u003e Set comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "map",
      "comment": "Map a function onto a set, creating a new set with no duplicates.",
      "raw": "map : (comparable -\u003e comparable') -\u003e Set comparable -\u003e Set comparable'",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ],
            "result": {
              "tag": "var",
              "name": "comparable'"
            }
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable'"
            }
          ]
        }
      }
    },
    {
      "name": "member",
      "comment": "Determine if a value is in a set.",
      "raw": "member : comparable -\u003e Set comparable -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "remove",
      "comment": "Remove a value from a set. If the value is not found, no changes are made.",
      "raw": "remove : comparable -\u003e Set comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "singleton",
      "comment": "Create a set with one value.",
      "raw": "singleton : comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "comparable"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "toList",
      "comment": "Convert a set into a list.",
      "raw": "toList : Set comparable -\u003e [comparable]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    },
    {
      "name": "union",
      "comment": "Get the union of two sets. Keep all values.",
      "raw": "union : Set comparable -\u003e Set comparable -\u003e Set comparable",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Set",
            "args": [
              {
                "tag": "var",
                "name": "comparable"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Set",
          "args": [
            {
              "tag": "var",
              "name": "comparable"
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Signal",
  "document": "The library for general signal manipulation. Includes lift functions up to\n`lift8` and infix lift operators `\u003c~` and `~`, combinations, filters, and\npast-dependence.\n\nSignals are time-varying values. Lifted functions are reevaluated whenever any of\ntheir input signals has an event. Signal events may be of the same value as the\nprevious value of the signal. Such signals are useful for timing and\npast-dependence.\n\nSome useful functions for working with time (e.g. setting FPS) and combining\nsignals and time (e.g.  delaying updates, getting timestamps) can be found in\nthe [`Time`](/docs/Signal/Time.elm) library.\n\n# Combine\n@docs constant, lift, lift2, merge, merges, combine\n\n# Past-Dependence\n@docs foldp, count, countIf\n\n#Filters\n@docs keepIf, dropIf, keepWhen, dropWhen, dropRepeats, sampleOn\n\n# Pretty Lift\n@docs (\u003c~), (~)\n\n# Do you even lift?\n@docs lift3, lift4, lift5, lift6, lift7, lift8",
  "aliases": [],
  "datatypes": [
    {
      "name": "Signal",
      "comment": "",
      "raw": "data Signal a = Signal",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "Signal",
          "type": {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "\u003c~",
      "comment": "An alias for `lift`. A prettier way to apply a function to the current value\nof a signal.",
      "raw": "(\u003c~) : (a -\u003e b) -\u003e Signal a -\u003e Signal b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      },
      "associativity": "left",
      "precedence": 4
    },
    {
      "name": "combine",
      "comment": "Combine a list of signals into a signal of lists.",
      "raw": "combine : [Signal a] -\u003e Signal [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Signal",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "constant",
      "comment": "Create a constant signal that never changes.",
      "raw": "constant : a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "count",
      "comment": "Count the number of events that have occurred.",
      "raw": "count : Signal a -\u003e Signal Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "countIf",
      "comment": "Count the number of events that have occurred that satisfy a given predicate.",
      "raw": "countIf : (a -\u003e Bool) -\u003e Signal a -\u003e Signal Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "dropIf",
      "comment": "Drop events that satisfy the given predicate. Elm does not allow undefined\nsignals, so a base case must be provided in case the predicate is satisfied\ninitially.",
      "raw": "dropIf : (a -\u003e Bool) -\u003e a -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "dropRepeats",
      "comment": "Drop updates that repeat the current value of the signal.\n\nImagine a signal `numbers` has initial value\n0 and then updates with values 0, 0, 1, 1, and 2. `dropRepeats numbers`\nis a signal that has initial value 0 and updates as follows: ignore 0,\nignore 0, update to 1, ignore 1, update to 2.",
      "raw": "dropRepeats : Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "dropWhen",
      "comment": "Drop events when the first signal is true. When the first signal becomes\nfalse, the most recent value of the second signal will be propagated. Until the\nfirst signal becomes true again, all events will be propagated. Elm does not\nallow undefined signals, s oa base case must be provided in case the first\nsignal is true initially.",
      "raw": "dropWhen : Signal Bool -\u003e a -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ]
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "foldp",
      "comment": "Create a past-dependent signal. Each value given on the input signal will\nbe accumulated, producing a new output value.\n\nFor instance, `foldp (+) 0 (fps 40)` is the time the program has been running,\nupdated 40 times a second.",
      "raw": "foldp : (a -\u003e b -\u003e b) -\u003e b -\u003e Signal a -\u003e Signal b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "keepIf",
      "comment": "Keep only events that satisfy the given predicate. Elm does not allow\nundefined signals, so a base case must be provided in case the predicate is\nnot satisfied initially.",
      "raw": "keepIf : (a -\u003e Bool) -\u003e a -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "keepWhen",
      "comment": "Keep events only when the first signal is true. When the first signal\nbecomes true, the most recent value of the second signal will be propagated.\nUntil the first signal becomes false again, all events will be propagated. Elm\ndoes not allow undefined signals, so a base case must be provided in case the\nfirst signal is not true initially.",
      "raw": "keepWhen : Signal Bool -\u003e a -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ]
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "lift",
      "comment": "Transform a signal with a given function.",
      "raw": "lift  : (a -\u003e b) -\u003e Signal a -\u003e Signal b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "lift2",
      "comment": "Combine two signals with a given function.",
      "raw": "lift2 : (a -\u003e b -\u003e c) -\u003e Signal a -\u003e Signal b -\u003e Signal c",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "c"
            }
          ]
        }
      }
    },
    {
      "name": "lift3",
      "comment": "",
      "raw": "lift3 : (a -\u003e b -\u003e c -\u003e d) -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              }
            ],
            "result": {
              "tag": "var",
              "name": "d"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "d"
            }
          ]
        }
      }
    },
    {
      "name": "lift4",
      "comment": "",
      "raw": "lift4 : (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d -\u003e Signal e",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              },
              {
                "tag": "var",
                "name": "d"
              }
            ],
            "result": {
              "tag": "var",
              "name": "e"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "d"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "e"
            }
          ]
        }
      }
    },
    {
      "name": "lift5",
      "comment": "",
      "raw": "lift5 : (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f) -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d -\u003e Signal e -\u003e Signal f",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              },
              {
                "tag": "var",
                "name": "d"
              },
              {
                "tag": "var",
                "name": "e"
              }
            ],
            "result": {
              "tag": "var",
              "name": "f"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "d"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "e"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "f"
            }
          ]
        }
      }
    },
    {
      "name": "lift6",
      "comment": "",
      "raw": "lift6 : (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g)\n      -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d -\u003e Signal e -\u003e Signal f -\u003e Signal g",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              },
              {
                "tag": "var",
                "name": "d"
              },
              {
                "tag": "var",
                "name": "e"
              },
              {
                "tag": "var",
                "name": "f"
              }
            ],
            "result": {
              "tag": "var",
              "name": "g"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "d"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "e"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "f"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "g"
            }
          ]
        }
      }
    },
    {
      "name": "lift7",
      "comment": "",
      "raw": "lift7 : (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h)\n      -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d -\u003e Signal e -\u003e Signal f -\u003e Signal g -\u003e Signal h",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              },
              {
                "tag": "var",
                "name": "d"
              },
              {
                "tag": "var",
                "name": "e"
              },
              {
                "tag": "var",
                "name": "f"
              },
              {
                "tag": "var",
                "name": "g"
              }
            ],
            "result": {
              "tag": "var",
              "name": "h"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "d"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "e"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "f"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "h"
            }
          ]
        }
      }
    },
    {
      "name": "lift8",
      "comment": "",
      "raw": "lift8 : (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i)\n      -\u003e Signal a -\u003e Signal b -\u003e Signal c -\u003e Signal d -\u003e Signal e -\u003e Signal f -\u003e Signal g -\u003e Signal h -\u003e Signal i",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "var",
                "name": "b"
              },
              {
                "tag": "var",
                "name": "c"
              },
              {
                "tag": "var",
                "name": "d"
              },
              {
                "tag": "var",
                "name": "e"
              },
              {
                "tag": "var",
                "name": "f"
              },
              {
                "tag": "var",
                "name": "g"
              },
              {
                "tag": "var",
                "name": "h"
              }
            ],
            "result": {
              "tag": "var",
              "name": "i"
            }
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "c"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "d"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "e"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "f"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "h"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "i"
            }
          ]
        }
      }
    },
    {
      "name": "merge",
      "comment": "Merge two signals into one, biased towards the first signal if both signals\nupdate at the same time.",
      "raw": "merge : Signal a -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "merges",
      "comment": "Merge many signals into one, biased towards the left-most signal if multiple\nsignals update simultaneously.",
      "raw": "merges : [Signal a] -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Signal",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "sampleOn",
      "comment": "Sample from the second input every time an event occurs on the first input.\nFor example, `(sampleOn clicks (every second))` will give the approximate time\nof the latest click.",
      "raw": "sampleOn : Signal a -\u003e Signal b -\u003e Signal b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "b"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      }
    },
    {
      "name": "~",
      "comment": "Informally, an alias for `liftN`. Intersperse it between additional signal\narguments of the lifted function.\n\nFormally, signal application. This takes two signals, holding a function and\na value. It applies the current function to the current value.\n\nThe following expressions are equivalent:\n\n         scene \u003c~ Window.dimensions ~ Mouse.position\n         lift2 scene Window.dimensions Mouse.position",
      "raw": "(~) : Signal (a -\u003e b) -\u003e Signal a -\u003e Signal b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "function",
                "args": [
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ],
                "result": {
                  "tag": "var",
                  "name": "b"
                }
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "b"
            }
          ]
        }
      },
      "associativity": "left",
      "precedence": 4
    }
  ]
},
{
  "name": "String",
  "document": "A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\n# Basics\n@docs isEmpty, length, reverse, repeat\n\n# Building and Splitting\n@docs  cons, uncons, append, concat, split, join, words, lines\n\n# Get Substrings\n@docs sub, left, right, dropLeft, dropRight\n\n# Check for Substrings\n@docs contains, startsWith, endsWith, indexes, indices\n\n# Conversions\n@docs show, toInt, toFloat, toList, fromList\n\n# Formatting\nCosmetic operations such as padding with extra characters or trimming whitespace.\n\n@docs toUpper, toLower,\n      pad, padLeft, padRight,\n      trim, trimLeft, trimRight\n\n# Higher-Order Functions\n@docs map, filter, foldl, foldr, any, all",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "all",
      "comment": "Check to see if *all* characters satisfy a predicate.\n\n      all isDigit \"90210\" == True\n      all isDigit \"R2-D2\" == False\n      all isDigit \"heart\" == False",
      "raw": "all : (Char -\u003e Bool) -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "any",
      "comment": "Check to see if *any* characters satisfy a predicate.\n\n      any isDigit \"90210\" == True\n      any isDigit \"R2-D2\" == True\n      any isDigit \"heart\" == False",
      "raw": "any : (Char -\u003e Bool) -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "append",
      "comment": "Append two strings. You can also use [the `(++)` operator](/library/List.elm#++)\nto do this.\n\n      append \"butter\" \"fly\" == \"butterfly\"",
      "raw": "append : String -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "concat",
      "comment": "Concatenate many strings into one.\n\n      concat [\"never\",\"the\",\"less\"] == \"nevertheless\"",
      "raw": "concat : [String] -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "cons",
      "comment": "Add a character to the beginning of a string",
      "raw": "cons : Char -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "contains",
      "comment": "See if a string contains another one.\n\n      contains \"the\" \"theory\" == True\n      contains \"hat\" \"theory\" == False\n      contains \"THE\" \"theory\" == False\n\nUse `Regex.contains` if you need something more flexible.",
      "raw": "contains : String -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "dropLeft",
      "comment": "Drop N characters from the left side of a string.",
      "raw": "dropLeft : Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "dropRight",
      "comment": "Drop N characters from the right side of a string.",
      "raw": "dropRight : Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "endsWith",
      "comment": "See if a string ends with another one.\n\n      endsWith \"the\" \"theory\" == False\n      endsWith \"ory\" \"theory\" == True",
      "raw": "endsWith : String -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "filter",
      "comment": "Keep only the characters that satisfy the predicate:\n\n      filter isDigit \"R2-D2\" == \"22\"",
      "raw": "filter : (Char -\u003e Bool) -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "foldl",
      "comment": "Reduce a string from the left:\n\n      foldl cons \"\" \"time\" == \"emit\"",
      "raw": "foldl : (Char -\u003e b -\u003e b) -\u003e b -\u003e String -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldr",
      "comment": "Reduce a string from the right:\n\n      foldr cons \"\" \"time\" == \"time\"",
      "raw": "foldr : (Char -\u003e b -\u003e b) -\u003e b -\u003e String -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "fromList",
      "comment": "Convert a list of characters into a String. Can be useful if you\nwant to create a string primarly by consing, perhaps for decoding\nsomething.\n\n      fromList ['a','b','c'] == \"abc\"",
      "raw": "fromList : [Char] -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "indexes",
      "comment": "Get all of the indexes for a substring.\n\n      indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n      indexes \"ss\" \"Mississippi\"  == [2,5]\n      indexes \"needle\" \"haystack\" == []",
      "raw": "indexes : String -\u003e String -\u003e [Int]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "indices",
      "comment": "Alias for `indexes`",
      "raw": "indices : String -\u003e String -\u003e [Int]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "isEmpty",
      "comment": "Check if a string is empty.\n\n      isEmpty \"\" == True\n      isEmpty \"the world\" == False",
      "raw": "isEmpty : String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "join",
      "comment": "Put many strings together with a given separator.\n\n      join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n      join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"",
      "raw": "join : String -\u003e [String] -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "left",
      "comment": "Take N characters from the left side of a string.",
      "raw": "left : Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "length",
      "comment": "Get the length of a string.\n\n      length \"innumerable\" == 11",
      "raw": "length : String -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "lines",
      "comment": "Break a string into lines, splitting on newlines.\n\n      lines \"How are you?\\nGood? == [\"How are you?\", \"Good?\"]",
      "raw": "lines : String -\u003e [String]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "map",
      "comment": "Transform every character in a string\n\n      map (\\c -\u003e if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"",
      "raw": "map : (Char -\u003e Char) -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Char",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Char",
              "args": []
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "pad",
      "comment": "Pad a string on both sides until it has a given length.\n\n      pad 5 ' ' \"1\"   == \"  1  \"\n      pad 5 ' ' \"11\"  == \"  11 \"\n      pad 5 ' ' \"121\" == \" 121 \"",
      "raw": "pad : Int -\u003e Char -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "padLeft",
      "comment": "Pad a string on the left until it has a given length.\n\n      pad 5 '.' \"1\"   == \"....1\"\n      pad 5 '.' \"11\"  == \"...11\"\n      pad 5 '.' \"121\" == \"..121\"",
      "raw": "padLeft : Int -\u003e Char -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "padRight",
      "comment": "Pad a string on the right until it has a given length.\n\n      pad 5 '.' \"1\"   == \"1....\"\n      pad 5 '.' \"11\"  == \"11...\"\n      pad 5 '.' \"121\" == \"121..\"",
      "raw": "padRight : Int -\u003e Char -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Char",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "repeat",
      "comment": "Repeat a string N times.\n\n      repeat 3 \"ha\" == \"hahaha\"",
      "raw": "repeat : Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "reverse",
      "comment": "Reverse a string.\n\n      reverse \"stressed\" == \"desserts\"",
      "raw": "reverse : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "right",
      "comment": "Take N characters from the right side of a string.",
      "raw": "right : Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "show",
      "comment": "Turn any kind of value into a string.\n\n      show 42    == \"42\"\n      show [1,2] == \"[1,2]\"",
      "raw": "show : a -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "split",
      "comment": "Split a string using a given separator.\n\n      split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n      split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\"]\n\nUse `Regex.split` if you need something more flexible.",
      "raw": "split : String -\u003e String -\u003e [String]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "startsWith",
      "comment": "See if a string starts with another one.\n\n      startsWith \"the\" \"theory\" == True\n      startsWith \"ory\" \"theory\" == False",
      "raw": "startsWith : String -\u003e String -\u003e Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Bool",
          "args": []
        }
      }
    },
    {
      "name": "sub",
      "comment": "Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n      sub  7  9 \"snakes on a plane!\" == \"on\"\n      sub  0  6 \"snakes on a plane!\" == \"snakes\"\n      sub  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n      sub -6 -1 \"snakes on a plane!\" == \"plane\"",
      "raw": "sub : Int -\u003e Int -\u003e String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "toFloat",
      "comment": "Try to convert a string into a float, failing on improperly formatted strings.\n\n      toFloat \"123\" == Just 123.0\n      toFloat \"-42\" == Just -42.0\n      toFloat \"3.1\" == Just 3.1\n      toFloat \"31a\" == Nothing",
      "raw": "toFloat : String -\u003e Maybe Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "toInt",
      "comment": "Try to convert a string into an int, failing on improperly formatted strings.\n\n      toInt \"123\" == Just 123\n      toInt \"-42\" == Just -42\n      toInt \"3.1\" == Nothing\n      toInt \"31a\" == Nothing",
      "raw": "toInt : String -\u003e Maybe Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "toList",
      "comment": "Convert a string to a list of characters.\n\n      toList \"abc\" == ['a','b','c']",
      "raw": "toList : String -\u003e [Char]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "Char",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "toLower",
      "comment": "Convert a string to all lower case. Useful for case insensitive comparisons.",
      "raw": "toLower : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "toUpper",
      "comment": "Convert a string to all upper case. Useful for case insensitive comparisons\nand VIRTUAL YELLING.",
      "raw": "toUpper : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "trim",
      "comment": "Get rid of whitespace on both sides of a string.\n\n      trim \"  hats  \\n\" == \"hats\"",
      "raw": "trim : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "trimLeft",
      "comment": "Get rid of whitespace on the left of a string.\n\n      trimLeft \"  hats  \\n\" == \"hats  \\n\"",
      "raw": "trimLeft : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "trimRight",
      "comment": "Get rid of whitespace on the left of a string.\n\n      trimRight \"  hats  \\n\" == \"  hats\"",
      "raw": "trimRight : String -\u003e String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "String",
          "args": []
        }
      }
    },
    {
      "name": "uncons",
      "comment": "Split a non-empty string into its head and tail. This lets you\npattern match on strings exactly as you would with lists.\n\n      uncons \"abc\" == Just ('a',\"bc\")\n      uncons \"\"    == Nothing",
      "raw": "uncons : String -\u003e Maybe (Char, String)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Maybe",
          "args": [
            {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "adt",
                  "name": "Char",
                  "args": []
                },
                {
                  "tag": "adt",
                  "name": "String",
                  "args": []
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "words",
      "comment": "Break a string into words, splitting on chunks of whitespace.\n\n      words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]",
      "raw": "words : String -\u003e [String]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Text",
  "document": "A library for styling and displaying text. Whlie the `String` library\nfocuses on representing and manipulating strings of character strings, the\n`Text` library focuses on how those strings should look on screen. It lets\nyou make text bold or italic, set the typeface, set the text size, etc.\n\n# Creating Text\n@docs toText\n\n# Creating Elements\n\nEach of the following functions places `Text` into a box. The function you use\ndetermines the alignment of the text.\n\n@docs leftAligned, rightAligned, centered, justified\n\n# Links and Style\n@docs link, Style, style, defaultStyle, Line\n\n# Convenience Functions\n\nThere are two convenience functions for creating an `Element` which can be\nuseful when debugging or prototyping:\n\n@docs plainText, asText\n\nThere are also a bunch of functions to set parts of a `Style` individually:\n\n@docs typeface, monospace, height, color, bold, italic, line",
  "aliases": [
    {
      "name": "Style",
      "comment": "Representation of all the ways you can style `Text`. If the `typeface` list\nis empty or the `height` is `Nothing`, the users will fall back on their\nbrowser's default settings. The following `Style` is black, 16 pixel tall,\nunderlined, and Times New Roman (assuming that typeface is available on the\nuser's computer):\n\n      { typeface = [ \"Times New Roman\", \"serif\" ]\n      , height   = Just 16\n      , color    = black\n      , bold     = False\n      , italic   = False\n      , line     = Just Under\n      }",
      "raw": "type Style =\n  { typeface : [String]\n  , height   : Maybe Float\n  , color    : Color\n  , bold     : Bool\n  , italic   : Bool\n  , line     : Maybe Line\n  }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "typeface",
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "adt",
                  "name": "String",
                  "args": []
                }
              ]
            }
          ],
          [
            "height",
            {
              "tag": "adt",
              "name": "Maybe",
              "args": [
                {
                  "tag": "adt",
                  "name": "Float",
                  "args": []
                }
              ]
            }
          ],
          [
            "color",
            {
              "tag": "adt",
              "name": "Color",
              "args": []
            }
          ],
          [
            "bold",
            {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          ],
          [
            "italic",
            {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          ],
          [
            "line",
            {
              "tag": "adt",
              "name": "Maybe",
              "args": [
                {
                  "tag": "adt",
                  "name": "Line",
                  "args": []
                }
              ]
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "Line",
      "comment": "Styles for lines on text. This allows you to add an underline, an overline,\nor a strike out text:\n\n      line Under   (toText \"underline\")\n      line Over    (toText \"overline\")\n      line Through (toText \"strike out\")",
      "raw": "data Line = Under | Over | Through",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Under",
          "type": {
            "tag": "adt",
            "name": "Line",
            "args": []
          }
        },
        {
          "name": "Over",
          "type": {
            "tag": "adt",
            "name": "Line",
            "args": []
          }
        },
        {
          "name": "Through",
          "type": {
            "tag": "adt",
            "name": "Line",
            "args": []
          }
        }
      ]
    },
    {
      "name": "Text",
      "comment": "",
      "raw": "data Text = Text",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Text",
          "type": {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "asText",
      "comment": "Convert anything to its textual representation and make it displayable in\nthe browser:\n\n        asText value = text (monospace (show value))\n\nExcellent for debugging.",
      "raw": "asText : a -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "bold",
      "comment": "Make text bold:\n\n      toText \"sometimes you want \" ++ bold (toText \"emphasis\")",
      "raw": "bold : Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "centered",
      "comment": "`Text` is centered in the text block. There is equal spacing on either side\nof a line of text.",
      "raw": "centered : Text -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "color",
      "comment": "Set the color of some text:\n\n      color red (toText \"Red\")",
      "raw": "color : Color -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "defaultStyle",
      "comment": "Plain black text. It uses the browsers default typeface and text height.\nNo decorations are used:\n\n      { typeface = []\n      , height = Nothing\n      , color = black\n      , bold = False\n      , italic = False\n      , line = Nothing\n      }",
      "raw": "defaultStyle : Style",
      "type": {
        "tag": "adt",
        "name": "Style",
        "args": []
      }
    },
    {
      "name": "height",
      "comment": "Set the height of some text:\n\n      height 40 (toText \"Title\")",
      "raw": "height : Float -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "italic",
      "comment": "Make text italic:\n\n      toText \"make it \" ++ italic (toText \"important\")",
      "raw": "italic : Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "justified",
      "comment": "`Text` is aligned along the left and right sides of the text block. Word\nspacing is adjusted to make this possible.",
      "raw": "justified : Text -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "leftAligned",
      "comment": "`Text` is aligned along the left side of the text block. This is sometimes\nknown as *ragged right*.",
      "raw": "leftAligned : Text -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "line",
      "comment": "Put lines on text:\n\n      line Under   (toText \"underlined\")\n      line Over    (toText \"overlined\")\n      line Through (toText \"strike out\")",
      "raw": "line : Line -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Line",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "link",
      "comment": "Create a link by providing a URL and the text of the link:\n\n      link \"http://elm-lang.org\" (toText \"Elm Website\")",
      "raw": "link : String -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "markdown",
      "comment": "for internal use only",
      "raw": "markdown : Element",
      "type": {
        "tag": "adt",
        "name": "Element",
        "args": []
      }
    },
    {
      "name": "monospace",
      "comment": "Switch to a monospace typeface. Good for code snippets.\n\n      monospace (toText \"foldl (+) 0 [1,2,3]\")",
      "raw": "monospace : Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "plainText",
      "comment": "Display a string with no styling:\n\n      plainText string = leftAligned (toText string)",
      "raw": "plainText : String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "rightAligned",
      "comment": "`Text` is aligned along the right side of the text block. This is sometimes\nknown as *ragged left*.",
      "raw": "rightAligned : Text -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "style",
      "comment": "Set the style of some text. For example, if you design a `Style` called\n`footerStyle` that is specifically for the bottom of your page, you could apply\nit to text like this:\n\n      style footerStyle (toText \"the old prince / 2007\")",
      "raw": "style : Style -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Style",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "toText",
      "comment": "Convert a string into text which can be styled and displayed. To show the\nstring `\"Hello World!\"` on screen in italics, you could say:\n\n      main = leftAligned (italic (toText \"Hello World!\"))",
      "raw": "toText : String -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    },
    {
      "name": "typeface",
      "comment": "Provide a list of prefered typefaces for some text.\n\n      [\"helvetica\",\"arial\",\"sans-serif\"]\n\nNot every browser has access to the same typefaces, so rendering will use the\nfirst typeface in the list that is found on the user's computer. If there are\nno matches, it will use their default typeface. This works the same as the CSS\nfont-family property.",
      "raw": "typeface : [String] -\u003e Text -\u003e Text",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Text",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Text",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Time",
  "document": "Library for working with time.\n\n# Units\n@docs Time, millisecond, second, minute, hour,\n      inMilliseconds, inSeconds, inMinutes, inHours\n\n# Tickers\n@docs fps, fpsWhen, every\n\n# Timing\n@docs timestamp, delay, since",
  "aliases": [
    {
      "name": "Time",
      "comment": "Type alias to make it clearer when you are working with time values.\nUsing the `Time` constants instead of raw numbers is very highly recommended.",
      "raw": "type Time = Float",
      "typeVariables": [],
      "type": {
        "tag": "adt",
        "name": "Float",
        "args": []
      }
    }
  ],
  "datatypes": [],
  "values": [
    {
      "name": "delay",
      "comment": "Delay a signal by a certain amount of time. So `(delay second Mouse.clicks)`\nwill update one second later than any mouse click.",
      "raw": "delay : Time -\u003e Signal a -\u003e Signal a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "every",
      "comment": "Takes a time interval t. The resulting signal is the current time, updated\nevery t.",
      "raw": "every : Time -\u003e Signal Time",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Time",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "fps",
      "comment": "Takes desired number of frames per second (fps). The resulting signal\ngives a sequence of time deltas as quickly as possible until it reaches\nthe desired FPS. A time delta is the time between the last frame and the\ncurrent frame.",
      "raw": "fps : number -\u003e Signal Time",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Time",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "fpsWhen",
      "comment": "Same as the fps function, but you can turn it on and off. Allows you\nto do brief animations based on user input without major inefficiencies.\nThe first time delta after a pause is always zero, no matter how long\nthe pause was. This way summing the deltas will actually give the amount\nof time that the output signal has been running.",
      "raw": "fpsWhen : number -\u003e Signal Bool -\u003e Signal Time",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "number"
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Time",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "hour",
      "comment": "",
      "raw": "hour : Time",
      "type": {
        "tag": "adt",
        "name": "Time",
        "args": []
      }
    },
    {
      "name": "inHours",
      "comment": "",
      "raw": "inHours : Time -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "inMilliseconds",
      "comment": "",
      "raw": "inMilliseconds : Time -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "inMinutes",
      "comment": "",
      "raw": "inMinutes : Time -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "inSeconds",
      "comment": "",
      "raw": "inSeconds : Time -\u003e Float",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Float",
          "args": []
        }
      }
    },
    {
      "name": "millisecond",
      "comment": "Units of time, making it easier to specify things like a half-second\n`(500 * milliseconds)` without remembering Elm&rsquo;s underlying units of time.",
      "raw": "millisecond : Time",
      "type": {
        "tag": "adt",
        "name": "Time",
        "args": []
      }
    },
    {
      "name": "minute",
      "comment": "",
      "raw": "minute : Time",
      "type": {
        "tag": "adt",
        "name": "Time",
        "args": []
      }
    },
    {
      "name": "second",
      "comment": "",
      "raw": "second : Time",
      "type": {
        "tag": "adt",
        "name": "Time",
        "args": []
      }
    },
    {
      "name": "since",
      "comment": "Takes a time `t` and any signal. The resulting boolean signal is true for\ntime `t` after every event on the input signal. So ``(second `since`\nMouse.clicks)`` would result in a signal that is true for one second after\neach mouse click and false otherwise.",
      "raw": "since : Time -\u003e Signal a -\u003e Signal Bool",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Time",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "Bool",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "timestamp",
      "comment": "Add a timestamp to any signal. Timestamps increase monotonically. When you\ncreate `(timestamp Mouse.x)`, an initial timestamp is produced. The timestamp\nupdates whenever `Mouse.x` updates.\n\nTimestamp updates are tied to individual events, so\n`(timestamp Mouse.x)` and `(timestamp Mouse.y)` will always have the same\ntimestamp because they rely on the same underlying event (`Mouse.position`).",
      "raw": "timestamp : Signal a -\u003e Signal (Time, a)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "adt",
                  "name": "Time",
                  "args": []
                },
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Touch",
  "document": "This is an early version of the touch library. It will likely grow to\ninclude gestures that would be useful for both games and web-pages.\n\n# Touches\n@docs Touch, touches\n\n# Gestures\n@docs taps",
  "aliases": [
    {
      "name": "Touch",
      "comment": "Every `Touch` has `xy` coordinates. It also has an identifier\n`id` to distinguish one touch from another.\n\nA touch also keeps info about the initial point and time of contact:\n`x0`, `y0`, and `t0`. This helps compute more complicated gestures\nlike taps, drags, and swipes which need to know about timing or direction.",
      "raw": "type Touch = { x:Int, y:Int, id:Int, x0:Int, y0:Int, t0:Time }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "x",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "y",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "id",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "x0",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "y0",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "t0",
            {
              "tag": "adt",
              "name": "Time",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [],
  "values": [
    {
      "name": "taps",
      "comment": "The last position that was tapped. Default value is `{x=0,y=0}`.\nUpdates whenever the user taps the screen.",
      "raw": "taps : Signal { x:Int, y:Int }",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "record",
            "fields": [
              [
                "x",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ],
              [
                "y",
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ]
            ],
            "extension": null
          }
        ]
      }
    },
    {
      "name": "touches",
      "comment": "A list of ongoing touches.",
      "raw": "touches : Signal [Touch]",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Touch",
                "args": []
              }
            ]
          }
        ]
      }
    }
  ]
},
{
  "name": "Trampoline",
  "document": "A [trampoline](http://en.wikipedia.org/wiki/Tail-recursive_function#Through_trampolining)\nmakes it possible to recursively call a function without growing the stack.\n\nPopular JavaScript implementations do not perform any tail-call elimination, so\nrecursive functions can cause a stack overflow if they go to deep. Trampolines\npermit unbounded recursion despite limitations in JavaScript.\n\nThis strategy may create many intermediate closures, which is very expensive in\nJavaScript, so use this library only when it is essential that you recurse deeply.\n\n# Trampolines\n@docs trampoline, Trampoline",
  "aliases": [],
  "datatypes": [
    {
      "name": "Trampoline",
      "comment": "A way to build computations that may be deeply recursive. We will take an\nexample of a tail-recursive function and rewrite it in a way that lets us use\na trampoline:\n\n      length : [a] -\u003e Int\n      length list = length' 0 list\n\n      length' : Int -\u003e [a] -\u003e Int\n      length' accum list =\n          case list of\n            []     -\u003e accum\n            hd::tl -\u003e length' (accum+1) tl\n\nThis finds the length of a list, but if the list is too long, it may cause a\nstack overflow. We can rewrite it as follows:\n\n      length : [a] -\u003e Int\n      length list = trampoline (length' 0 list)\n\n      length' : Int -\u003e [a] -\u003e Trampoline Int\n      length' accum list =\n          case list of\n            []     -\u003e Done accum\n            hd::tl -\u003e Continue (\\() -\u003e length' (accum+1) tl)\n\nNow it uses a trampoline and can recurse without growing the stack!",
      "raw": "data Trampoline a = Done a | Continue (() -\u003e Trampoline a)",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "Done",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Trampoline",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        },
        {
          "name": "Continue",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "function",
                "args": [
                  {
                    "tag": "adt",
                    "name": "_Tuple0",
                    "args": []
                  }
                ],
                "result": {
                  "tag": "adt",
                  "name": "Trampoline",
                  "args": [
                    {
                      "tag": "var",
                      "name": "a"
                    }
                  ]
                }
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Trampoline",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "trampoline",
      "comment": "Evaluate a trampolined value in constant space.",
      "raw": "trampoline : Trampoline a -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Trampoline",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    }
  ]
},
{
  "name": "Transform2D",
  "document": "A library for performing [2D matrix transformations][affine].\nIt is used primarily with the `groupTransform` function from `Graphics.Collage` and\nallows you to do things like rotation, scaling, translation, shearing, and reflection.\n\nNote that all the matrices in this library are 3x3 matrices of homogeneous\ncoordinates, used for [affine transformations][affine]. Since the bottom row as\nalways `0 0 1` in these matrices, it is omitted in the diagrams below.\n\n [affine]: http://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\n\n# Transforms\n@docs identity, matrix, rotation, translation, scale, scaleX, scaleY\n\n# Multiplication\n@docs multiply",
  "aliases": [],
  "datatypes": [
    {
      "name": "Transform2D",
      "comment": "",
      "raw": "data Transform2D = Transform2D",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Transform2D",
          "type": {
            "tag": "adt",
            "name": "Transform2D",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "identity",
      "comment": "Create an identity transform. Transforming by the identity does\nnot change anything, but it can come in handy as a default or\nbase case.\n\n          / 1 0 0 \\\n          \\ 0 1 0 /",
      "raw": "identity : Transform2D",
      "type": {
        "tag": "adt",
        "name": "Transform2D",
        "args": []
      }
    },
    {
      "name": "matrix",
      "comment": "Creates a transformation matrix. This lets you create transforms\nsuch as scales, shears, reflections, and translations.\n\n      matrix a b c d x y\n\n          / a b x \\\n          \\ c d y /\n\nNote that `x` and `y` are the translation values.",
      "raw": "matrix : Float -\u003e Float -\u003e Float -\u003e Float -\u003e Float -\u003e Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "multiply",
      "comment": "Multiplies two transforms together:\n\n      multiply m n\n\n          / ma mb mx \\     / na nb nx \\\n          | mc md my |  .  | nc nd ny |\n          \\  0  0  1 /     \\  0  0  1 /",
      "raw": "multiply : Transform2D -\u003e Transform2D -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Transform2D",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Transform2D",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "rotation",
      "comment": "Creates a [rotation matrix](http://en.wikipedia.org/wiki/Rotation_matrix).\nGiven an angle t, it creates a counterclockwise rotation matrix:\n\n          / cos t  -sin t  0 \\\n          \\ sin t   cos t  0 /",
      "raw": "rotation : Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "scale",
      "comment": "Creates a transformation matrix for scaling by a all directions:\n\n    scale s\n\n        / s 0 0 \\\n        \\ 0 s 0 /",
      "raw": "scale : Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "scaleX",
      "comment": "Creates a transformation for horizontal scaling",
      "raw": "scaleX : Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "scaleY",
      "comment": "Creates a transformation for vertical scaling",
      "raw": "scaleY : Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    },
    {
      "name": "translation",
      "comment": "Creates a transformation matrix for translation:\n\n    translation x y\n\n          / 1 0 x \\\n          \\ 0 1 y /",
      "raw": "translation : Float -\u003e Float -\u003e Transform2D",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Transform2D",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "WebSocket",
  "document": "A library for low latency HTTP communication. See the HTTP library for\nstandard requests like GET, POST, etc. The API of this library is likely to\nchange to make it more flexible.\n\n# Open a Connection\n@docs connect",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "connect",
      "comment": "Create a web-socket. The first argument is the URL of the desired\nweb-socket server. The input signal holds the outgoing messages,\nand the resulting signal contains the incoming ones.",
      "raw": "connect : String -\u003e Signal String -\u003e Signal String",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Signal",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Signal",
          "args": [
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Window",
  "document": "Provides information about the container that your Elm program lives in.\nWhen you embed Elm in a `\u003cdiv\u003e` it gives the dimensions of the container, not\nthe whole window.\n\n# Dimensions\n@docs dimensions, width, height",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "dimensions",
      "comment": "The current width and height of the window (i.e. the area viewable to the\nuser, not including scroll bars).",
      "raw": "dimensions : Signal (Int,Int)",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          }
        ]
      }
    },
    {
      "name": "height",
      "comment": "The current height of the window.",
      "raw": "height : Signal Int",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ]
      }
    },
    {
      "name": "width",
      "comment": "The current width of the window.",
      "raw": "width : Signal Int",
      "type": {
        "tag": "adt",
        "name": "Signal",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ]
      }
    }
  ]
},
{
  "name": "Graphics.Collage",
  "document": "The collage API is for freeform graphics. You can move, rotate, scale, etc.\nall sorts of forms including lines, shapes, images, and elements.\n\n# Unstructured Graphics\n@docs collage\n \n# Creating Forms\n@docs toForm, filled, textured, gradient, outlined, traced\n \n# Transforming Forms\n@docs move, moveX, moveY, scale, rotate, alpha\n \n# Grouping Forms\nGrouping forms makes it easier to write modular graphics code. You can create\na form that is a composite of many subforms. From there it is easy to transform\nit as a single unit.\n\n@docs group, groupTransform\n \n# Shapes\n@docs rect, oval, square, circle, ngon, polygon\n\n# Paths\n@docs segment, path\n \n# Line Styles\n@docs solid, dashed, dotted, LineStyle, LineCap, LineJoin, defaultLine",
  "aliases": [
    {
      "name": "Form",
      "comment": "",
      "raw": "type Form = {\n  theta : Float,\n  scale : Float,\n  x : Float,\n  y : Float,\n  alpha : Float,\n  form : BasicForm\n }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "theta",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "scale",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "x",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "y",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "alpha",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "form",
            {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "LineStyle",
      "comment": "All of the attributes of a line style. This lets you build up a line style\nhowever you want. You can also update existing line styles with record updates.",
      "raw": "type LineStyle = {\n  color : Color,\n  width : Float,\n  cap   : LineCap,\n  join  : LineJoin,\n  dashing    : [Int],\n  dashOffset : Int\n }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "color",
            {
              "tag": "adt",
              "name": "Color",
              "args": []
            }
          ],
          [
            "width",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "cap",
            {
              "tag": "adt",
              "name": "LineCap",
              "args": []
            }
          ],
          [
            "join",
            {
              "tag": "adt",
              "name": "LineJoin",
              "args": []
            }
          ],
          [
            "dashing",
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ]
            }
          ],
          [
            "dashOffset",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Path",
      "comment": "",
      "raw": "type Path = [(Float,Float)]",
      "typeVariables": [],
      "type": {
        "tag": "adt",
        "name": "_List",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          }
        ]
      }
    },
    {
      "name": "Shape",
      "comment": "",
      "raw": "type Shape = [(Float,Float)]",
      "typeVariables": [],
      "type": {
        "tag": "adt",
        "name": "_List",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          }
        ]
      }
    }
  ],
  "datatypes": [
    {
      "name": "BasicForm",
      "comment": "",
      "raw": "data BasicForm\n  = FPath LineStyle Path\n  | FShape (Either LineStyle FillStyle) Shape\n  | FImage Int Int (Int,Int) String\n  | FElement Element\n  | FGroup Transform2D [Form]",
      "typeVariables": [],
      "constructors": [
        {
          "name": "FPath",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "LineStyle",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Path",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          }
        },
        {
          "name": "FShape",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Either",
                "args": [
                  {
                    "tag": "adt",
                    "name": "LineStyle",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "FillStyle",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "Shape",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          }
        },
        {
          "name": "FImage",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  }
                ]
              },
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          }
        },
        {
          "name": "FElement",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Element",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          }
        },
        {
          "name": "FGroup",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Transform2D",
                "args": []
              },
              {
                "tag": "adt",
                "name": "_List",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Form",
                    "args": []
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "BasicForm",
              "args": []
            }
          }
        }
      ]
    },
    {
      "name": "FillStyle",
      "comment": "",
      "raw": "data FillStyle\n  = Solid Color\n  | Texture String\n  | Grad Gradient",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Solid",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Color",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "FillStyle",
              "args": []
            }
          }
        },
        {
          "name": "Texture",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "String",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "FillStyle",
              "args": []
            }
          }
        },
        {
          "name": "Grad",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Gradient",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "FillStyle",
              "args": []
            }
          }
        }
      ]
    },
    {
      "name": "LineCap",
      "comment": "The shape of the ends of a line.",
      "raw": "data LineCap = Flat | Round | Padded",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Flat",
          "type": {
            "tag": "adt",
            "name": "LineCap",
            "args": []
          }
        },
        {
          "name": "Round",
          "type": {
            "tag": "adt",
            "name": "LineCap",
            "args": []
          }
        },
        {
          "name": "Padded",
          "type": {
            "tag": "adt",
            "name": "LineCap",
            "args": []
          }
        }
      ]
    },
    {
      "name": "LineJoin",
      "comment": "The shape of the &ldquo;joints&rdquo; of a line, where each line segment\nmeets. `Sharp` takes an argument to limit the length of the joint. This\ndefaults to 10.",
      "raw": "data LineJoin = Smooth | Sharp Float | Clipped",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Smooth",
          "type": {
            "tag": "adt",
            "name": "LineJoin",
            "args": []
          }
        },
        {
          "name": "Sharp",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "LineJoin",
              "args": []
            }
          }
        },
        {
          "name": "Clipped",
          "type": {
            "tag": "adt",
            "name": "LineJoin",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "alpha",
      "comment": "Set the alpha of a `Form`. The default is 1, and 0 is totally transparent.",
      "raw": "alpha : Float -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "circle",
      "comment": "A circle with a given radius.",
      "raw": "circle : Float -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "collage",
      "comment": "A collage is a collection of 2D forms. There are no strict positioning\nrelationships between forms, so you are free to do all kinds of 2D graphics.",
      "raw": "collage : Int -\u003e Int -\u003e [Form] -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Form",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "dashed",
      "comment": "Create a dashed line style with a given color. Dashing equals `[8,4]`.",
      "raw": "dashed : Color -\u003e LineStyle",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "LineStyle",
          "args": []
        }
      }
    },
    {
      "name": "defaultLine",
      "comment": "The default line style, which is solid black with flat caps and sharp joints.\nYou can use record updates to build the line style you\nwant. For example, to make a thicker line, you could say:\n\n        { defaultLine | width \u003c- 10 }",
      "raw": "defaultLine : LineStyle",
      "type": {
        "tag": "adt",
        "name": "LineStyle",
        "args": []
      }
    },
    {
      "name": "dotted",
      "comment": "Create a dotted line style with a given color. Dashing equals `[3,3]`.",
      "raw": "dotted : Color -\u003e LineStyle",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "LineStyle",
          "args": []
        }
      }
    },
    {
      "name": "filled",
      "comment": "Create a filled in shape.",
      "raw": "filled : Color -\u003e Shape -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Shape",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "form",
      "comment": "",
      "raw": "form : BasicForm -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "BasicForm",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "gradient",
      "comment": "Fill a shape with a [gradient](/library/Color.elm#linear).",
      "raw": "gradient : Gradient -\u003e Shape -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Gradient",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Shape",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "group",
      "comment": "Flatten many forms into a single `Form`. This lets you move and rotate them\nas a single unit, making it possible to build small, modular components.",
      "raw": "group : [Form] -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Form",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "groupTransform",
      "comment": "Flatten many forms into a single `Form` and then apply a matrix\ntransformation.",
      "raw": "groupTransform : Transform2D -\u003e [Form] -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Transform2D",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Form",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "move",
      "comment": "Move a form by the given amount. This is a relative translation so\n`(move (10,10) form)` would move `form` ten pixels up and ten pixels to the\nright.",
      "raw": "move : (Float,Float) -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "moveX",
      "comment": "Move a shape in the x direction. This is relative so `(moveX 10 form)` moves\n`form` 10 pixels to the right.",
      "raw": "moveX : Float -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "moveY",
      "comment": "Move a shape in the y direction. This is relative so `(moveY 10 form)` moves\n`form` upwards by 10 pixels.",
      "raw": "moveY : Float -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "ngon",
      "comment": "A regular polygon with N sides. The first argument specifies the number\nof sides and the second is the radius. So to create a pentagon with radius\n30 you would say:\n\n        ngon 5 30",
      "raw": "ngon : Int -\u003e Float -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "outlined",
      "comment": "Outline a shape with a given line style.",
      "raw": "outlined : LineStyle -\u003e Shape -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "LineStyle",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Shape",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "oval",
      "comment": "An oval with a given width and height.",
      "raw": "oval : Float -\u003e Float -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "path",
      "comment": "Create a path that follows a sequence of points.",
      "raw": "path : [(Float,Float)] -\u003e Path",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Path",
          "args": []
        }
      }
    },
    {
      "name": "polygon",
      "comment": "Create an arbitrary polygon by specifying its corners in order.\n`polygon` will automatically close all shapes, so the given list\nof points does not need to start and end with the same position.",
      "raw": "polygon : [(Float,Float)] -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Float",
                    "args": []
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "rect",
      "comment": "A rectangle with a given width and height.",
      "raw": "rect : Float -\u003e Float -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "rotate",
      "comment": "Rotate a form by a given angle. Rotate takes standard Elm angles (radians)\nand turns things counterclockwise. So to turn `form` 30&deg; to the left\nyou would say, `(rotate (degrees 30) form)`.",
      "raw": "rotate : Float -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "scale",
      "comment": "Scale a form by a given factor. Scaling by 2 doubles the size.",
      "raw": "scale : Float -\u003e Form -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Form",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "segment",
      "comment": "Create a path along a given line segment.",
      "raw": "segment : (Float,Float) -\u003e (Float,Float) -\u003e Path",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Path",
          "args": []
        }
      }
    },
    {
      "name": "solid",
      "comment": "Create a solid line style with a given color.",
      "raw": "solid : Color -\u003e LineStyle",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "LineStyle",
          "args": []
        }
      }
    },
    {
      "name": "sprite",
      "comment": "Create a sprite from a sprite sheet. It cuts out a rectangle\nat a given position.",
      "raw": "sprite : Int -\u003e Int -\u003e (Int,Int) -\u003e String -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "square",
      "comment": "A square with a given edge length.",
      "raw": "square : Float -\u003e Shape",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Shape",
          "args": []
        }
      }
    },
    {
      "name": "textured",
      "comment": "Create a textured shape. The texture is described by some url and is\ntiled to fill the entire shape.",
      "raw": "textured : String -\u003e Shape -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Shape",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "toForm",
      "comment": "Turn any `Element` into a `Form`. This lets you use text, gifs, and video\nin your collage. This means you can move, rotate, and scale\nan `Element` however you want.",
      "raw": "toForm : Element -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    },
    {
      "name": "traced",
      "comment": "Trace a path with a given line style.",
      "raw": "traced : LineStyle -\u003e Path -\u003e Form",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "LineStyle",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Path",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Form",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Graphics.Element",
  "document": "Graphical elements that snap together to build complex widgets and layouts.\nEach Element is a rectangle with a known width and height, making them easy to\ncombine and position.\n\n# Images\n@docs image, fittedImage, croppedImage, tiledImage\n\n# Styling\n@docs width, height, size, color, opacity, link, tag\n\n# Inspection\n@docs widthOf, heightOf, sizeOf\n\n# Layout\n@docs flow, up, down, left, right, inward, outward\n\n## Layout Aliases\nThere are also some convenience functions for working\nwith `flow` in specific cases:\n\n@docs layers, above, below, beside\n\n# Positioning\n@docs empty, spacer, container\n\n## Specific Positions\n\nTo create a `Position` you can use any of the built-in positions\nwhich cover nine common positions.\n@docs middle, midTop, midBottom, midLeft, midRight, topLeft, topRight,\n      bottomLeft, bottomRight\n\nIf you need more precision, you can create custom positions.\n\n@docs absolute, relative, middleAt, midTopAt, midBottomAt, midLeftAt,\n      midRightAt, topLeftAt, topRightAt, bottomLeftAt, bottomRightAt",
  "aliases": [
    {
      "name": "Element",
      "comment": "",
      "raw": "type Element = { props : Properties, element : ElementPrim }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "props",
            {
              "tag": "adt",
              "name": "Properties",
              "args": []
            }
          ],
          [
            "element",
            {
              "tag": "adt",
              "name": "ElementPrim",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Position",
      "comment": "",
      "raw": "type Position = { horizontal : Three, vertical : Three, x : Pos, y : Pos }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "horizontal",
            {
              "tag": "adt",
              "name": "Three",
              "args": []
            }
          ],
          [
            "vertical",
            {
              "tag": "adt",
              "name": "Three",
              "args": []
            }
          ],
          [
            "x",
            {
              "tag": "adt",
              "name": "Pos",
              "args": []
            }
          ],
          [
            "y",
            {
              "tag": "adt",
              "name": "Pos",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Properties",
      "comment": "",
      "raw": "type Properties = {\n  id      : Int,\n  width   : Int,\n  height  : Int,\n  opacity : Float,\n  color   : Maybe Color,\n  href    : JSString,\n  tag     : JSString,\n  hover   : (),\n  click   : ()\n }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "id",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "width",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "height",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "opacity",
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            }
          ],
          [
            "color",
            {
              "tag": "adt",
              "name": "Maybe",
              "args": [
                {
                  "tag": "adt",
                  "name": "Color",
                  "args": []
                }
              ]
            }
          ],
          [
            "href",
            {
              "tag": "adt",
              "name": "JSString",
              "args": []
            }
          ],
          [
            "tag",
            {
              "tag": "adt",
              "name": "JSString",
              "args": []
            }
          ],
          [
            "hover",
            {
              "tag": "adt",
              "name": "_Tuple0",
              "args": []
            }
          ],
          [
            "click",
            {
              "tag": "adt",
              "name": "_Tuple0",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "Direction",
      "comment": "",
      "raw": "data Direction = DUp | DDown | DLeft | DRight | DIn | DOut",
      "typeVariables": [],
      "constructors": [
        {
          "name": "DUp",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "DDown",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "DLeft",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "DRight",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "DIn",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "DOut",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        }
      ]
    },
    {
      "name": "ElementPrim",
      "comment": "",
      "raw": "data ElementPrim\n  = Image ImageStyle Int Int JSString\n  | Container Position Element\n  | Flow Direction [Element]\n  | Spacer\n  | RawHtml\n  | Custom",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Image",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "ImageStyle",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "JSString",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "ElementPrim",
              "args": []
            }
          }
        },
        {
          "name": "Container",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Position",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Element",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "ElementPrim",
              "args": []
            }
          }
        },
        {
          "name": "Flow",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Direction",
                "args": []
              },
              {
                "tag": "adt",
                "name": "_List",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Element",
                    "args": []
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "ElementPrim",
              "args": []
            }
          }
        },
        {
          "name": "Spacer",
          "type": {
            "tag": "adt",
            "name": "ElementPrim",
            "args": []
          }
        },
        {
          "name": "RawHtml",
          "type": {
            "tag": "adt",
            "name": "ElementPrim",
            "args": []
          }
        },
        {
          "name": "Custom",
          "type": {
            "tag": "adt",
            "name": "ElementPrim",
            "args": []
          }
        }
      ]
    },
    {
      "name": "ImageStyle",
      "comment": "",
      "raw": "data ImageStyle = Plain | Fitted | Cropped (Int,Int) | Tiled",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Plain",
          "type": {
            "tag": "adt",
            "name": "ImageStyle",
            "args": []
          }
        },
        {
          "name": "Fitted",
          "type": {
            "tag": "adt",
            "name": "ImageStyle",
            "args": []
          }
        },
        {
          "name": "Cropped",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "ImageStyle",
              "args": []
            }
          }
        },
        {
          "name": "Tiled",
          "type": {
            "tag": "adt",
            "name": "ImageStyle",
            "args": []
          }
        }
      ]
    },
    {
      "name": "Pos",
      "comment": "",
      "raw": "data Pos = Absolute Int | Relative Float",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Absolute",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Pos",
              "args": []
            }
          }
        },
        {
          "name": "Relative",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "Pos",
              "args": []
            }
          }
        }
      ]
    },
    {
      "name": "Three",
      "comment": "",
      "raw": "data Three = P | Z | N",
      "typeVariables": [],
      "constructors": [
        {
          "name": "P",
          "type": {
            "tag": "adt",
            "name": "Three",
            "args": []
          }
        },
        {
          "name": "Z",
          "type": {
            "tag": "adt",
            "name": "Three",
            "args": []
          }
        },
        {
          "name": "N",
          "type": {
            "tag": "adt",
            "name": "Three",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "above",
      "comment": "Stack elements vertically.\nTo put `a` above `b` you would say: ``a `above` b``",
      "raw": "above : Element -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "absolute",
      "comment": "",
      "raw": "absolute : Int -\u003e Pos",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Pos",
          "args": []
        }
      }
    },
    {
      "name": "below",
      "comment": "Stack elements vertically.\nTo put `a` below `b` you would say: ``a `below` b``",
      "raw": "below : Element -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "beside",
      "comment": "Put elements beside each other horizontally.\nTo put `a` beside `b` you would say: ``a `beside` b``",
      "raw": "beside : Element -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "bottomLeft",
      "comment": "",
      "raw": "bottomLeft  : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "bottomLeftAt",
      "comment": "",
      "raw": "bottomLeftAt      : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "bottomRight",
      "comment": "",
      "raw": "bottomRight : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "bottomRightAt",
      "comment": "",
      "raw": "bottomRightAt     : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "color",
      "comment": "Create an `Element` with a given background color.",
      "raw": "color : Color -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Color",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "container",
      "comment": "Put an element in a container. This lets you position the element really\neasily, and there are tons of ways to set the `Position`.\nTo center `element` exactly in a 300-by-300 square you would say:\n\n        container 300 300 middle element\n\nBy setting the color of the container, you can create borders.",
      "raw": "container : Int -\u003e Int -\u003e Position -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Position",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "croppedImage",
      "comment": "Create a cropped image. Take a rectangle out of the picture starting\nat the given top left coordinate. If you have a 140-by-140 image,\nthe following will cut a 100-by-100 square out of the middle of it.\n\n        croppedImage (20,20) 100 100 \"yogi.jpg\"",
      "raw": "croppedImage : (Int,Int) -\u003e Int -\u003e Int -\u003e String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "down",
      "comment": "",
      "raw": "down : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "empty",
      "comment": "An Element that takes up no space. Good for things that appear conditionally:\n\n    flow down [ img1, if showMore then img2 else empty ]",
      "raw": "empty : Element",
      "type": {
        "tag": "adt",
        "name": "Element",
        "args": []
      }
    },
    {
      "name": "fittedImage",
      "comment": "Create a fitted image given a width, height, and image source.\nThis will crop the picture to best fill the given dimensions.",
      "raw": "fittedImage : Int -\u003e Int -\u003e String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "flow",
      "comment": "Have a list of elements flow in a particular direction.\nThe `Direction` starts from the first element in the list.\n\n        flow right [a,b,c]\n\n          +---+---+---+\n          | a | b | c |\n          +---+---+---+",
      "raw": "flow : Direction -\u003e [Element] -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Direction",
            "args": []
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Element",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "height",
      "comment": "Create an `Element` with a given height.",
      "raw": "height : Int -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "heightOf",
      "comment": "Get the height of an Element",
      "raw": "heightOf : Element -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    },
    {
      "name": "image",
      "comment": "Create an image given a width, height, and image source.",
      "raw": "image : Int -\u003e Int -\u003e String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "inward",
      "comment": "",
      "raw": "inward : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "layers",
      "comment": "Layer elements on top of each other, starting from the bottom:\n`layers == flow outward`",
      "raw": "layers : [Element] -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "Element",
                "args": []
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "left",
      "comment": "",
      "raw": "left : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "link",
      "comment": "Create an `Element` that is a hyper-link.",
      "raw": "link : String -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "midBottom",
      "comment": "",
      "raw": "midBottom   : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "midBottomAt",
      "comment": "",
      "raw": "midBottomAt       : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "midLeft",
      "comment": "",
      "raw": "midLeft     : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "midLeftAt",
      "comment": "",
      "raw": "midLeftAt         : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "midRight",
      "comment": "",
      "raw": "midRight    : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "midRightAt",
      "comment": "",
      "raw": "midRightAt        : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "midTop",
      "comment": "",
      "raw": "midTop      : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "midTopAt",
      "comment": "",
      "raw": "midTopAt          : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "middle",
      "comment": "",
      "raw": "middle      : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "middleAt",
      "comment": "",
      "raw": "middleAt          : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "opacity",
      "comment": "Create an `Element` with a given opacity. Opacity is a number between 0 and 1\nwhere 0 means totally clear.",
      "raw": "opacity : Float -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "outward",
      "comment": "",
      "raw": "outward : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "relative",
      "comment": "",
      "raw": "relative : Float -\u003e Pos",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Float",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Pos",
          "args": []
        }
      }
    },
    {
      "name": "right",
      "comment": "",
      "raw": "right : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "size",
      "comment": "Create an `Element` with a new width and height.",
      "raw": "size : Int -\u003e Int -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "sizeOf",
      "comment": "Get the width and height of an Element",
      "raw": "sizeOf : Element -\u003e (Int,Int)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "spacer",
      "comment": "Create an empty box. This is useful for getting your spacing right and\nfor making borders.",
      "raw": "spacer : Int -\u003e Int -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "tag",
      "comment": "Create an `Element` with a tag. This lets you link directly to it.\nThe element `(tag \"all-about-badgers\" thirdParagraph)` can be reached\nwith a link like this: `/facts-about-animals.elm#all-about-badgers`",
      "raw": "tag : String -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "tiledImage",
      "comment": "",
      "raw": "tiledImage : Int -\u003e Int -\u003e String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "topLeft",
      "comment": "",
      "raw": "topLeft     : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "topLeftAt",
      "comment": "",
      "raw": "topLeftAt         : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "topRight",
      "comment": "",
      "raw": "topRight    : Position",
      "type": {
        "tag": "adt",
        "name": "Position",
        "args": []
      }
    },
    {
      "name": "topRightAt",
      "comment": "",
      "raw": "topRightAt        : Pos -\u003e Pos -\u003e Position",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Pos",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Position",
          "args": []
        }
      }
    },
    {
      "name": "up",
      "comment": "",
      "raw": "up : Direction",
      "type": {
        "tag": "adt",
        "name": "Direction",
        "args": []
      }
    },
    {
      "name": "width",
      "comment": "Create an `Element` with a given width.",
      "raw": "width : Int -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "widthOf",
      "comment": "Get the width of an Element",
      "raw": "widthOf : Element -\u003e Int",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Int",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "Graphics.Input",
  "document": "This module is for creating standard input widgets such as buttons and\ntext fields. All functions in this library follow a general pattern in which\nyou create an `Input` that many elements can report to:\n\n```haskell\nclicks : Input ()\nclicks = input ()\n\nclickableYogi : Element\nclickableYogi = clickable clicks.handle () (image 40 40 \"/yogi.jpg\")\n```\n\nWhenever the user clicks on the resulting `clickableYogi` element, it sends an\nupdate to the `clicks` input. You will see this pattern again and again in\nexamples in this library, so just read on to get a better idea of how it works!\n\n# Creating Inputs\n@docs Input, input\n\n# Basic Input Elements\n\nTo learn about text fields, see the\n[`Graphics.Input.Field`](Graphics-Input-Field) library.\n\n@docs button, customButton, checkbox, dropDown\n\n# Clicks and Hovers\n@docs clickable, hoverable",
  "aliases": [
    {
      "name": "Input",
      "comment": "This is the key abstraction of this library. An `Input` is a record\nof two fields:\n\n  1. `signal` &mdash; all values coming to this input from &ldquo;the world&rdquo;\n  2. `handle` &mdash; a way to refer to this particular input and send it values\n\nThis will make more sense as you see more examples.",
      "raw": "type Input a = { signal : Signal a, handle : Handle a }",
      "typeVariables": [
        "a"
      ],
      "type": {
        "tag": "record",
        "fields": [
          [
            "signal",
            {
              "tag": "adt",
              "name": "Signal",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          ],
          [
            "handle",
            {
              "tag": "adt",
              "name": "Handle",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "Handle",
      "comment": "",
      "raw": "data Handle a = Handle",
      "typeVariables": [
        "a"
      ],
      "constructors": [
        {
          "name": "Handle",
          "type": {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "button",
      "comment": "Create a standard button. The following example begins making a basic\ncalculator:\n\n      data Keys = Number Int | Plus | Minus | Clear\n\n      keys : Input Keys\n      keys = input Clear\n\n      calculator : Element\n      calculator =\n          flow right [ button keys.handle (Number 1) \"1\"\n                     , button keys.handle (Number 2) \"2\"\n                     , button keys.handle    Plus    \"+\"\n                     ]\n\nIf the user presses the \"+\" button, `keys.signal` will update to `Plus`. If the\nusers presses \"2\", `keys.signal` will update to `(Number 2)`.",
      "raw": "button : Handle a -\u003e a -\u003e String -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "checkbox",
      "comment": "Create a checkbox. The following example creates three synced checkboxes:\n\n      check : Input Bool\n      check = input False\n\n      boxes : Bool -\u003e Element\n      boxes checked =\n          let box = container 40 40 middle (checkbox check.handle id checked)\n          in  flow right [ box, box, box ]\n\n      main : Signal Element\n      main = boxes \u003c~ check.signal",
      "raw": "checkbox : Handle a -\u003e (Bool -\u003e a) -\u003e Bool -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "Bool",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "clickable",
      "comment": "Detect mouse clicks on a specific `Element`. In the following example,\nwe will create a clickable picture called `cat`.\n\n      data Picture = Cat | Hat\n\n      picture : Input Picture\n      picture = input Cat\n\n      cat : Element\n      cat = image 30 30 \"/cat.jpg\"\n               |\u003e clickable picture.handle Cat\n\n      hat : Element\n      hat = image 30 30 \"/hat.jpg\"\n               |\u003e clickable picture.handle Hat\n\nWhen the user clicks on the `cat` element, `picture.signal` receives\nan update containing the value `Cat`. When the user clicks on the `hat` element,\n`picture.signal` receives an update containing the value `Hat`. This lets you\ndistinguish which element was clicked. In a more complex example, they could be\ndistinguished with IDs or more complex data structures.",
      "raw": "clickable : Handle a -\u003e a -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "customButton",
      "comment": "Same as `button` but lets you customize buttons to look however you want.\n\n      click : Input ()\n      click = input ()\n\n      prettyButton : Element\n      prettyButton =\n          customButton click.handle\n              (image 100 40 \"/button_up.jpg\")\n              (image 100 40 \"/button_hover.jpg\")\n              (image 100 40 \"/button_down.jpg\")",
      "raw": "customButton : Handle a -\u003e a -\u003e Element -\u003e Element -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "var",
            "name": "a"
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "dropDown",
      "comment": "Create a drop-down menu.  The following drop-down lets you choose your\nfavorite British sport:\n\n      data Sport = Football | Cricket | Snooker\n\n      sport : Input (Maybe Sport)\n      sport = input Nothing\n\n      sportDropDown : Element\n      sportDropDown =\n          dropDown sport.handle\n            [ (\"\"        , Nothing)\n            , (\"Football\", Just Football)\n            , (\"Cricket\" , Just Cricket)\n            , (\"Snooker\" , Just Snooker)\n            ]\n\nIf the user selects \"Football\" from the drop down menue, `sport.signal`\nwill update to `Just Football`.",
      "raw": "dropDown : Handle a -\u003e [(String,a)] -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "String",
                    "args": []
                  },
                  {
                    "tag": "var",
                    "name": "a"
                  }
                ]
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "hoverable",
      "comment": "Detect mouse hovers over a specific `Element`. In the following example,\nwe will create a hoverable picture called `cat`.\n\n      hover : Input Bool\n      hover = input False\n\n      cat : Element\n      cat = image 30 30 \"/cat.jpg\"\n              |\u003e hoverable hover.handle id\n\nWhen the mouse hovers above the `cat` element, `hover.signal` will become\n`True`. When the mouse leaves it, `hover.signal` will become `False`.",
      "raw": "hoverable : Handle a -\u003e (Bool -\u003e a) -\u003e Element -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Bool",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "Element",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "input",
      "comment": "This creates a new `Input`. You provide a single argument that will serve\nas the initial value of the input&rsquo;s `signal`. For example:\n\n      numbers : Input Int\n      numbers = input 42\n\nThe initial value of `numbers.signal` is 42, and you will be able\nto pipe updates to the input using `numbers.handle`.\n\nNote: This is an inherently impure function. Specifically, `(input ())` and\n`(input ())` are actually two different inputs with different signals and handles.",
      "raw": "input : a -\u003e Input a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Input",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    }
  ]
},
{
  "name": "Graphics.Input.Field",
  "document": "This library provides an API for creating and updating text fields.\nText fields use exactly the same approach as [`Graphics.Input`](Graphics-Input)\nfor modelling user input, allowing you to keep track of new events and update\ntext fields programmatically.\n\n# Create Fields\n@docs field, password, email\n\n# Field Content\n@docs Content, Selection, Direction, noContent\n\n# Field Style\n@docs Style, Outline, noOutline, Highlight, noHighlight, Dimensions, uniformly",
  "aliases": [
    {
      "name": "Content",
      "comment": "Represents the current content of a text field. For example:\n\n      content = Content \"She sells sea shells\" (Selection 0 3 Backward)\n\nThis means the user highlighted the substring `\"She\"` backwards. The value of\n`content.string` is `\"She sells sea shells\"`.",
      "raw": "type Content = { string:String, selection:Selection }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "string",
            {
              "tag": "adt",
              "name": "String",
              "args": []
            }
          ],
          [
            "selection",
            {
              "tag": "adt",
              "name": "Selection",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Dimensions",
      "comment": "For setting dimensions of a fields padding or border. The left, right, top,\nand bottom may all have different sizes. The following example creates\ndimensions such that the left and right are twice as wide as the top and bottom:\n\n      myDimensions : Int -\u003e Dimensions\n      myDimensions n = { left = 2 * n, right = 2 * n, top = n, bottom = n }",
      "raw": "type Dimensions = { left:Int, right:Int, top:Int, bottom:Int }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "left",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "right",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "top",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "bottom",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Highlight",
      "comment": "When a field has focus, it has a blue highlight around it by default. The\n`Highlight` lets you set the `color` and `width` of this highlight. Set the\n`width` to zero to turn the highlight off. Here is an example highlight that\nis blue and thin:\n\n      { color = blue, width = 1 }",
      "raw": "type Highlight = { color:Color, width:Int }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "color",
            {
              "tag": "adt",
              "name": "Color",
              "args": []
            }
          ],
          [
            "width",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Outline",
      "comment": "A field can have a outline around it. This lets you set its color, width,\nand radius. The radius allows you to round the corners of your field. Set the\nwidth to zero to make it invisible. Here is an example outline that is grey\nand thin with slightly rounded corners:\n\n      { color = grey, width = uniformly 1, radius = 4 }",
      "raw": "type Outline = { color:Color, width:Dimensions, radius:Int }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "color",
            {
              "tag": "adt",
              "name": "Color",
              "args": []
            }
          ],
          [
            "width",
            {
              "tag": "adt",
              "name": "Dimensions",
              "args": []
            }
          ],
          [
            "radius",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Selection",
      "comment": "The selection within a text field. `start` is never greater than `end`:\n\n      Selection 0 0 Forward  -- cursor precedes all characters\n\n      Selection 5 9 Backward -- highlighting characters starting after\n                             -- the 5th and ending after the 9th",
      "raw": "type Selection = { start:Int, end:Int, direction:Direction }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "start",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "end",
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ],
          [
            "direction",
            {
              "tag": "adt",
              "name": "Direction",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    },
    {
      "name": "Style",
      "comment": "Describe the style of a text box. `style` describes the style of the text\nitself using [`Text.Style`](/Text#Style). `outline` describes the glowing blue\noutline that shows up when the field has focus. `outline` describes the line\nsurrounding the text field, and `padding` adds whitespace between the `outline`\nand the text.\n\nThe width and height of the text box *includes* the `padding` and `outline`.\nSay we have a text box that is 40 pixels tall. It has a uniform outline of\n1 pixel and a uniform padding of 5 pixels. Both of these must be subtracted\nfrom the total height to determine how much room there is for text. The\n`padding` and `outline` appear on the top and bottom, so there will be 28\nvertical pixels remaining for the text (40 - 1 - 5 - 5 - 1).",
      "raw": "type Style =\n  { padding   : Dimensions\n  , outline   : Outline\n  , highlight : Highlight\n  , style     : Text.Style\n  }",
      "typeVariables": [],
      "type": {
        "tag": "record",
        "fields": [
          [
            "padding",
            {
              "tag": "adt",
              "name": "Dimensions",
              "args": []
            }
          ],
          [
            "outline",
            {
              "tag": "adt",
              "name": "Outline",
              "args": []
            }
          ],
          [
            "highlight",
            {
              "tag": "adt",
              "name": "Highlight",
              "args": []
            }
          ],
          [
            "style",
            {
              "tag": "adt",
              "name": "Text.Style",
              "args": []
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [
    {
      "name": "Direction",
      "comment": "The direction of selection. When the user highlights a selection in a text\nfield, they must do it in a particular direction. This determines which end of\nthe selection moves when they change the selection by pressing Shift-Left or\nShift-Right.",
      "raw": "data Direction = Forward | Backward",
      "typeVariables": [],
      "constructors": [
        {
          "name": "Forward",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        },
        {
          "name": "Backward",
          "type": {
            "tag": "adt",
            "name": "Direction",
            "args": []
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "defaultStyle",
      "comment": "The default style for a text field. The outline is `Color.grey` with width\n1 and radius 2. The highlight is `Color.blue` with width 1, and the default\ntext color is black.",
      "raw": "defaultStyle : Style",
      "type": {
        "tag": "adt",
        "name": "Style",
        "args": []
      }
    },
    {
      "name": "email",
      "comment": "Same as `field` but it adds an annotation that this field is for email\naddresses. This is helpful for auto-complete and for mobile users who may\nget a custom keyboard with an `@` and `.com` button.",
      "raw": "email : Style -\u003e Handle a -\u003e (Content -\u003e a) -\u003e String -\u003e Content -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Style",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Content",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Content",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "field",
      "comment": "Create a text field. The following example creates a time-varying element\ncalled `nameField`. As the user types their name, the field will be updated\nto match what they have entered.\n\n      name : Input Content\n      name = input noContent\n\n      nameField : Signal Element\n      nameField = field defaultStyle name.handle id \"Name\" \u003c~ name.signal\n\nWhen we use the `field` function, we first give it a visual style. This is\nthe first argument so that it is easier to define your own custom field\n(`myField = field myStyle`). The next two arguments are a `Handle` and a\nhandler function that processes or augments events before sending them along\nto the associated `Input`. In the example above we use the `id` function to\npass events along unchanged to the `name` `Input`. We then provide the\nplace-holder message to use when no input has been provided yet. Finally,\nwe give the current `Content` of the field. This argument is last because\nit is most likely to change frequently, making function composition easier.",
      "raw": "field : Style -\u003e Handle a -\u003e (Content -\u003e a) -\u003e String -\u003e Content -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Style",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Content",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Content",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "noContent",
      "comment": "A field with no content:\n\n      Content \"\" (Selection 0 0 Forward)",
      "raw": "noContent : Content",
      "type": {
        "tag": "adt",
        "name": "Content",
        "args": []
      }
    },
    {
      "name": "noHighlight",
      "comment": "An highlight with zero width, so you cannot see it.",
      "raw": "noHighlight : Highlight",
      "type": {
        "tag": "adt",
        "name": "Highlight",
        "args": []
      }
    },
    {
      "name": "noOutline",
      "comment": "An outline with zero width, so you cannot see it.",
      "raw": "noOutline : Outline",
      "type": {
        "tag": "adt",
        "name": "Outline",
        "args": []
      }
    },
    {
      "name": "password",
      "comment": "Same as `field` but the UI element blocks out each characters.",
      "raw": "password : Style -\u003e Handle a -\u003e (Content -\u003e a) -\u003e String -\u003e Content -\u003e Element",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Style",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Handle",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Content",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "String",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Content",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Element",
          "args": []
        }
      }
    },
    {
      "name": "uniformly",
      "comment": "Create uniform dimensions:\n\n      uniformly 4 == { left=4, right=4, top=4, bottom=4 }\n\nThe following example creates an outline where the left, right, top, and bottom\nedges all have width 1:\n\n      Outline grey (uniformly 1) 4",
      "raw": "uniformly : Int -\u003e Dimensions",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "Dimensions",
          "args": []
        }
      }
    }
  ]
},
{
  "name": "JavaScript.Experimental",
  "document": "A pair of very experimental functions for converting between\nElm records and JavaScript objects. It currently uses a best effort\nconversion that can cause runtime errors. This API should change and\nimprove as we find its key failings.\n\n# Converting between Elm records and JS Objects\n@docs toRecord, fromRecord",
  "aliases": [],
  "datatypes": [],
  "values": [
    {
      "name": "fromRecord",
      "comment": "Turn arbitrary Elm records into JavaScript objects.\nLists become arrays, nested records are allowed. No ADTs.\n\n        -- OK records\n        { student=\"Steve\", scores=[83,94,99,72] }\n        { errorLevel=10, critical=True }\n\n        -- BAD records\n        { answer = Nothing }\n        { result = Left \"An error occurred\" }",
      "raw": "fromRecord : a -\u003e JSObject",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "var",
            "name": "a"
          }
        ],
        "result": {
          "tag": "adt",
          "name": "JSObject",
          "args": []
        }
      }
    },
    {
      "name": "toRecord",
      "comment": "Turn arbitrary JavaScript objects into Elm records.\nArrays are converted into lists, nested objects are allowed.\nNo `null` values or non-homogeneous arrays.\n\n        -- OK objects\n        { student:\"Steve\", scores:[83,94,99,72] }\n        { errorLevel:10, critical:true }\n\n        -- BAD objects\n        { answer:null }\n        { info:[true,42,'what'] }",
      "raw": "toRecord : JSObject -\u003e a",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "JSObject",
            "args": []
          }
        ],
        "result": {
          "tag": "var",
          "name": "a"
        }
      }
    }
  ]
}
]