// [PackageDev] target_format: plist, ext: tmLanguage
// CTRL+ALT+SHIFT+P shows selector
{
  "name": "Generic Config",
  "scopeName": "source.genconfig",
  "fileTypes": ["cfg", "conf", "config", "ini", "prop"],
  "uuid": "6c0abe56-18d2-4957-ac45-01fa1a0cb62a",

  "patterns": [
    {
      "name": "constant.other.genconfig",
      "match": "#([a-fA-F0-9]{8}|[a-fA-F0-9]{6}|[a-fA-F0-9]{3})\\b",
      "comment": "Color (with alpha): #aacc4322, #bf34fa, #ccc"
    },
    {
      "name": "meta.comment.genconfig",
      "match": "(?:(?:^\\s*)|\\s+)(?:(#.*)|(--\\s+.*)|([^:]//.*))$\n?",
      "captures": {
          "1": { "name": "comment.line.number-sign.genconfig" },
          "2": { "name": "comment.line.double-dash.genconfig" },
          "3": { "name": "comment.line.double-slash.genconfig" }
      },
      "comment": "One line comment"
    },
    {
      "name": "comment.line.number-sign.genconfig",
      "match": "(?:(?:^\\s*)|\\s+);\\s*(?=.).*$\n?",
      "comment": "; one line comment"
    },
    // NOTE: values with chars after f will match too (like 0xZZZ)
    {
      "name": "constant.numeric.genconfig",
      "match": "\\b[0-9]+([a-zA-Z]+)?\\b",
      "comment": "Number or number with unit (like 10k, 12M, 92dpi etc) and also hex like values 0xdf"
    },
    {
      "name": "constant.language.genconfig",
      "match": "\\b([tT]rue|[fF]alse|TRUE|FALSE)\\b",
      "comment": "Constant"
    },
    {
      "name": "constant.language.genconfig",
      "match": "\\b(?<!-)([oO]n|[oO]ff|ON|OFF|[yY]es|[nN]o|YES|NO|[nN]ull|NULL|[nN]one|NONE|nan|NaN|NAN)(?!-)\\b",
      "comment": "Constant"
    },
    { "include": "#quoted_single_string" },
    { "include": "#quoted_double_string" },
    { "include": "#double_string" },
    { "include": "#single_string" },
    {
      "name": "storage.type.genconfig",
      "match": "(?:^\\s*(\\w+)\\s*(?={))|(?:^\\s*(\\w+)\\s*$)|(^\\s*\\[.*\\]\\s*$)|(^\\s*\\<.*\\>\\s*$)",
      "comment": "One line word, or word with following {, or [word] or <word>"
    },
    {
      "name": "keyword.other.genconfig",
      "match": "(^\\s*|\\b)(?<![.-])(function|define|ifn?def|endif|macro|insertmacro|index|location|alias|include|rewrite|if|then|else|start|stop|restart|with|alert|internal)(?![.-])\\b",
      "comment": "Keywords"
    },
    {
      "name": "meta.param.genconfig",
      "match": "^\\s*(\\w[\\w-]*)[\\s=:]\\s*",
      "captures": {
          "1": { "name": "variable.parameter.genconfig" }
      },
      "comment": "Colorize key in lines like: key = value or key: value or key value"
    },
    {
      "name": "storage.source.genconfig",
      "match": "([\\%\\$@]{1,2}\\{\\w+\\}[\\%\\$@]{0,2})|([\\%\\$@]{1,2}\\(\\w+\\)[\\%\\$@]{0,2})|([\\%\\$@]{1,2}\\w+[\\%\\$@]{0,2})",
      "comment": "Var name: %name, %name%, $name, $name$, ${name}, %{name}, %(name), $(name)"
    },
    {
      "name": "support.constant.genconfig",
      "match": "\\b[A-Z_][A-Z_0-9]*\\b",
      "comment": "Constant like names (ie in uppercase: NAME, SOME_NAME)"
    },
    {
      "name": "constant.other.genconfig",
      "match": "\\b(?:(\\w+://.*)|localhost)\\b",
      "comment": "URL like strings (http://name.org, ssh://111.22.33.4:42)"
    },
    {
      "name": "string.regexp.genconfig",
      "match": "\\^.*\\$",
      "comment": "RegExp"
    },
    {
      "name": "keyword.operator.genconfig",
      "match": "(!|\\~|%|=|\\^|\\+|\\-|\\<|\\>|\\?|/|\\*|\\|)",
      "comment": "Operators"
    },
    {
      "name": "support.type.genconfig",
      "match": "\\b(?<!/)[\\w\\-\\.\\+]+/[\\w\\-\\.\\+]+(?!/)\\b",
      "comment": "Mime types (text/plain, application/x-javascript etc)"
    },
    {
      "name": "meta.function.genconfig",
      "match": "\\b(\\w+)\\b\\(",
      "captures": {
          "1": { "name": "entity.name.function.genconfig" }
      },
      "comment": "function call: name()"
    }
  ],
  "repository": {
    "double_string": {
      "name": "string.quoted.double.genconfig",
      "begin": "\"",
      "patterns": [
        {
          "name": "constant.character.genconfig",
          "match": "\\\\\\s*\""
        },
        { "include": "#double_string" }
      ],
      "end": "\""
    },
    "single_string": {
      "name": "string.quoted.signle.genconfig",
      "begin": "'",
      "patterns": [
        {
          "name": "constant.character.genconfig",
          "match": "\\\\\\s*'"
        },
        { "include": "#single_string" }
      ],
      "end": "'"
    },
    "quoted_single_string": {
      "name": "string.quoted.qsignle.genconfig",
      "begin": "\\\\'",
      "patterns": [
        { "include": "#quoted_single_string" }
      ],
      "end": "\\\\'"
    },
    "quoted_double_string": {
      "name": "string.quoted.qdouble.genconfig",
      "begin": "\\\\\"",
      "patterns": [       
        { "include": "#quoted_double_string" }
      ],
      "end": "\\\\\""
    }
  }
}
