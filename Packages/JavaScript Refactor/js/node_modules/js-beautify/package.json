{
  "name": "js-beautify",
  "version": "0.4.2",
  "description": "jsbeautifier.org for node",
  "main": "index.js",
  "preferGlobal": true,
  "bin": {
    "css-beautify": "./cli.js",
    "html-beautify": "./cli.js",
    "js-beautify": "./cli.js"
  },
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "node ./tests/beautify-tests.js"
  },
  "bugs": "https://github.com/einars/js-beautify/issues",
  "homepage": "http://jsbeautifier.org/",
  "repository": {
    "type": "git",
    "url": "git://github.com/einars/js-beautify.git"
  },
  "keywords": [
    "beautify",
    "beautifier",
    "code-quality"
  ],
  "author": {
    "name": "Einar Lielmanis",
    "email": "einar@jsbeautifier.org"
  },
  "contributors": [
    {
      "name": "Vital Batmanov",
      "email": "vital76@gmail.com"
    },
    {
      "name": "Chris J. Shull",
      "email": "chrisjshull@gmail.com"
    },
    {
      "name": "Gian Marco Gherardi",
      "email": "gianmarco.gherardi@gmail.com"
    },
    {
      "name": "Stan",
      "email": "stasson@orc.ru"
    },
    {
      "name": "Vittorio Gambaletta",
      "email": "VittGam@vittgam.net"
    },
    {
      "name": "Daniel Stockman",
      "email": "daniel.stockman@gmail.com"
    },
    {
      "name": "Liam Newman",
      "email": "bitwiseman@gmail.com"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "config-chain": "~1.1.5",
    "nopt": "~2.1.1"
  },
  "readme": "# JS Beautifier\n\n...or, more specifically, all of the code powering\n[jsbeautifier.org](http://jsbeautifier.org/).\n\nThis little beautifier will reformat and reindent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edwardâ€™s popular packer,\nas well as deobfuscate scripts processed by\n[javascriptobfuscator.com](http://javascriptobfuscator.com/).\n\n## Usage\n\nTo beautify from the command-line you can use the provided Python script/library or [npm](http://npmjs.org/) package.\n\n### Python\n\n`./js-beautify file.js` beautifies a file, output goes to `stdout`.\n\nTo use `jsbeautifier` as a library is simple:\n\n``` python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n``` python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\n### JavaScript\n\nAs an alternative to the Python script, you may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n```js\nvar beautify = require('js-beautify').js_beautify,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2 }));\n});\n```\n\n### Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file                    Input file(s) (Pass '-' for stdin). These can also be passed directly.\n  -r, --replace                 Write output in-place, replacing input\n  -o, --outfile                 Write output to file (default stdout)\n  --config                      Path to config file\n  --type                        [js|css|html] [\"js\"]\n  -q, --quiet                   Suppress logging to stdout\n  -v, --version                 Show the version\n  -h, --help                    Show this help\n\nBeautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -l, --indent-level            Initial indentation level [0]\n  -t, --indent-with-tabs        Indent with tabs, overrides -s and -c\n  -p, --preserve-newlines       Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines   Maximum number of line-breaks to be preserved in one chunk [10]\n  -j, --jslint-happy            Enable jslint-stricter mode\n  -b, --brace-style             [collapse|expand|end-expand|expand-strict] [\"collapse\"]\n  -B, --break-chained-methods   Break chained method calls across subsequent lines\n  -k, --keep-array-indentation  Preserve array indentation\n  -x, --unescape-strings        Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length        Wrap lines at next opportunity after N characters [0]\n  --good-stuff                  Warm the cockles of Crockford's heart\n```\n\nThese largely correspond to the underscored option keys for both library interfaces, which have these defaults:\n\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_level\": 0,\n    \"indent_with_tabs\": false,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"jslint_happy\": false,\n    \"brace_style\": \"collapse\",\n    \"keep_array_indentation\": false,\n    \"keep_function_indentation\": false,\n    \"space_before_conditional\": true,\n    \"break_chained_methods\": false,\n    \"eval_code\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0\n}\n```\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\nYou might notice that the CLI options and defaults hash aren't 100% correlated. Historically, the Python and JS APIs have not been 100% identical. For example, `space_before_conditional` is currently JS-only, and not addressable from the CLI script. There are a few other additional cases keeping us from 100% API-compatibility. Patches welcome!\n\n#### CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify` are also provided as an easy interface into those scripts. Alternatively, `js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n\nHTML Beautifier Options:\n  -s, --indent-size             Indentation size [4]\n  -c, --indent-char             Indentation character [\" \"]\n  -b, --brace-style             [collapse|expand|end-expand] [\"collapse\"]\n  -S, --indent-scripts          [keep|separate|normal] [\"normal\"]\n  -W, --max-char                Maximum characters per line (0 disables) [250]\n  -U, --unformatted             List of tags (defaults to inline) that should not be reformatted\n```\n\n## License\n\nYou are free to use this in any way you want, in case you find this\nuseful or working for you. (MIT)\n\n## Credits\n\nWritten by Einar Lielmanis, <einar@jsbeautifier.org>\nPython version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n\nThanks to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n",
  "readmeFilename": "README.md",
  "_id": "js-beautify@0.4.2",
  "_from": "js-beautify@"
}
