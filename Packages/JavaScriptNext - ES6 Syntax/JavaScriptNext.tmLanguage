<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist
  PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN'
  'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>JavaScriptNext</string>
    <key>fileTypes</key>
    <array>
      <string>js</string>
      <string>htc</string>
      <string>jsx</string>
    </array>
    <key>scopeName</key>
    <string>source.js</string>
    <key>firstLineMatch</key>
    <string>^#!/.*\b(node|js)</string>
    <key>keyEquivalent</key>
    <string>^~J</string>
    <key>patterns</key>
    <array>

      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#support</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#core</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#special</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#sugar</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#special-comments-conditional-compilation</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>/\*\*</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>name</key>
            <string>comment.block.documentation.js</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>/\*</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>name</key>
            <string>comment.block.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(//).*$\n?</string>
            <key>name</key>
            <string>comment.line.double-slash.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.html.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.html.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(&lt;!--|--&gt;)</string>
            <key>name</key>
            <string>comment.block.html.js</string>
          </dict>
        </array>
      </dict>
      <key>core</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#leading-space</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-method</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-number</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#arrow-function</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-class</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-quasi</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-module</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-keywords</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-function-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-function-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-labels</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal-punctuation</string>
          </dict>
        </array>
      </dict>
      <key>brackets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.function-call.method.with-arguments.js</string>
            <key>match</key>
            <string>(?x)(?&lt;= \. ) ([_$a-zA-Z][_$\w]*)? (?=\()</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\()(?!\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.scope.round.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.group.braces.round</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
            <key>end</key>
            <string>(\))</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\[)(?!\])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.scope.square.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.group.braces.square</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
            <key>end</key>
            <string>(\])</string>
          </dict>
        </array>
      </dict>
      <key>literal-function-call</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?=[_$a-zA-Z][_$\w]*\s*\()</string>
            <key>end</key>
            <string>(?=\()</string>
            <key>name</key>
            <string>meta.function-call.static.with-arguments.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>([_$a-zA-Z][_$\w]*)?</string>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literal-method</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.function-call.method.with-arguments.js</string>
            <key>match</key>
            <string>(?x)(?&lt;= \. ) ([_$a-zA-Z][_$\w]*) (?=\()</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>meta.group.braces.round.function.arguments.js</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.scope.round.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.function-call.method.without-arguments.js</string>
            <key>match</key>
            <string>(?x)(?&lt;= \. ) ([_$a-zA-Z][_$\w]*) ((\( \s* \)))</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
          \b(function)
          (?=
            (?:\b(?:[_$a-zA-Z][_$\w]*))? \s* # The function name
            \(.*?\) # The properties that the function accepts
          )</string>
            <key>comment</key>
            <string>function(one,two,...)\n?{...}</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.function.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
            <key>end</key>
            <string>(?&lt;=})(\s*\n)?</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.method.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.method.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.method.js</string>
            <key>match</key>
            <string>(?x)
            (?&lt;![_$\w] )(?&lt;!function)
            ([_$a-zA-Z][_$\w]*)
            (\() (\s*
                (.*?)
              )?\s* (\))
            \s*
            (?={)</string>
          </dict>
        </array>
      </dict>
      <key>literal-class</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.extends.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.extends.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match regular class like: class MyClass {  }</string>
            <key>match</key>
            <string>\b(class)\b(?:\s+([a-zA-Z_$]\w*)\s*(?:\b(extends)\b\s*([a-zA-Z_$][.\w]*))?)?\s*</string>
            <key>name</key>
            <string>meta.class.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.accessor.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.accessor.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.accessor.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>Concise getter and setter</string>
            <key>match</key>
            <string>\b([gs]et\s*)\b([a-zA-Z_$][\w?_$]*)\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.accessor.js</string>
          </dict>
        </array>
      </dict>
      <key>literal-module</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>match module like: module Module {  }</string>
            <key>match</key>
            <string>\b(module)(?:\s+([a-zA-Z_$][_$\w]*))?\s*(?=\{)</string>
            <key>name</key>
            <string>meta.module.js</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.module.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.module.js</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>match export like: export decl</string>
            <key>match</key>
            <string>\b(export)\b\s*(?=(?:module|class|function|var|let|const)\b(?:\s+[a-zA-Z_$][_$\w]*)?)</string>
            <key>name</key>
            <string>meta.module.export.js</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.export.js</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>arrow-function</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>arrow.function.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?x)\s*(
               (?:(\() (.*?)? (\)))
                         | ([_$a-zA-Z][_$\w]*)
               )\s*(=&gt;)</string>
                <key>name</key>
                <string>storage.type.function.arrow.js</string>
                <key>comment</key>
                <string>match stuff like:(args) =&gt;</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.arrow.function.js</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.js</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.function.arrow.js</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.js</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.function.arrow.js</string>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.arrow.js</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literal-function-constructor</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match regular function like: function myFunc(arg) {  }</string>
            <key>match</key>
            <string>\b(function)(?:\s+([a-zA-Z_$]\w*))?\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.function.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.constant.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match stuff like: Sound.prototype = {  } when extending an object</string>
            <key>match</key>
            <string>([a-zA-Z_?.$][\w?.$]*)\.(prototype)\s*=\s*</string>
            <key>name</key>
            <string>meta.prototype.declaration.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.constant.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.js</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match stuff like: Sound.prototype.play = function() {  }</string>
            <key>match</key>
            <string>([a-zA-Z_?.$][\w?.$]*)\.(prototype)\.([a-zA-Z_?.$][\w?.$]*)\s*=\s*(function)?\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.prototype.function.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.constant.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>Sound.prototype</string>
            <key>match</key>
            <string>([a-zA-Z_?.$][\w?.$]*)\.(prototype)</string>
            <key>name</key>
            <string>meta.prototype.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.constant.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match stuff like: Sound.prototype.play = myfunc</string>
            <key>match</key>
            <string>([a-zA-Z_?.$][\w?.$]*)\.(prototype)\.([a-zA-Z_?.$][\w?.$]*)\s*=\s*</string>
            <key>name</key>
            <string>meta.function.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.object.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.js</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match stuff like: Sound.play = function() {  }</string>
            <key>match</key>
            <string>([a-zA-Z_?.$][\w?.$]*)\.([a-zA-Z_?.$][\w?.$]*)\s*=\s*(function)( [a-zA-Z_?.$][\w?.$]*)?\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.function.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.js</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>match stuff like: foobar: function() {  }</string>
            <key>match</key>
            <string>\b([a-zA-Z_?.$][\w?.$]*)\s*(:)\s*\b(function)?\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.function.json.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.quoted.single.js</string>
              </dict>
              <key>10</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.js</string>
              </dict>
              <key>11</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.js</string>
              </dict>
              <key>12</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.js</string>
              </dict>
              <key>13</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.end.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.js</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>string.quoted.double.js</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.js</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.js</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.js</string>
              </dict>
              <key>9</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.js</string>
              </dict>
            </dict>
            <key>comment</key>
            <string>Attempt to match &quot;foo&quot;: function</string>
            <key>match</key>
            <string>(?:((')(.*?)('))|((&quot;)(.*?)(&quot;)))\s*(:)\s*\b(function)?\s*(\()(.*?)(\))</string>
            <key>name</key>
            <string>meta.function.json.js</string>
          </dict>
        </array>
      </dict>
      <key>literal-keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.new.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.new.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(new)\s+([a-zA-Z_?.$][\w?.$]*)</string>
            <key>name</key>
            <string>meta.instance.constructor</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(var|let|const)\b</string>
            <key>name</key>
            <string>keyword.control.declaration.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(return|yield)\b</string>
            <key>name</key>
            <string>keyword.control.flow.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(else|if)\b</string>
            <key>name</key>
            <string>keyword.control.conditional.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(catch|finally|throw|try)\b</string>
            <key>name</key>
            <string>keyword.control.trycatch.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(break|continue|do|for|goto|while)\b</string>
            <key>name</key>
            <string>keyword.control.loop.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(case|default|switch)\b</string>
            <key>name</key>
            <string>keyword.control.switch.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(delete|in(stanceof)?|new|typeof|void|with)\b</string>
            <key>name</key>
            <string>keyword.operator.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\btrue\b</string>
            <key>name</key>
            <string>constant.language.boolean.true.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\bfalse\b</string>
            <key>name</key>
            <string>constant.language.boolean.false.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\bnull\b</string>
            <key>name</key>
            <string>constant.language.null.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\bundefined\b</string>
            <key>name</key>
            <string>constant.language.undefined.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\bNaN\b</string>
            <key>name</key>
            <string>constant.language.nan.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(arguments)\b</string>
            <key>name</key>
            <string>variable.language.arguments.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(super)\b</string>
            <key>name</key>
            <string>variable.language.super.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(this)\b</string>
            <key>name</key>
            <string>variable.language.this.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(self)\b</string>
            <key>name</key>
            <string>storage.self.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)\b(__proto__)\b</string>
            <key>name</key>
            <string>variable.language.proto.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)\b(constructor)\b</string>
            <key>name</key>
            <string>variable.language.constructor.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)\b(prototype)\b</string>
            <key>name</key>
            <string>variable.language.prototype.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>!|%|&amp;|\*|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?\:|\*=|/=|%=|\+=|\-=|&amp;=|\^=</string>
            <key>name</key>
            <string>keyword.operator.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>:</string>
            <key>name</key>
            <string>punctuation.separator.key-value</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
          !(?!=)| # logical-not     right-to-left   right
          &amp;&amp;    | # logical-and     left-to-right   both
          \|\|   # logical-or      left-to-right   both</string>
            <key>name</key>
            <string>keyword.operator.logical.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
            %= | # assignment      right-to-left   both
            &amp;= | # assignment      right-to-left   both
           \*= | # assignment      right-to-left   both
           \+= | # assignment      right-to-left   both
            -= | # assignment      right-to-left   both
            /= | # assignment      right-to-left   both
           \^= | # assignment      right-to-left   both
           \|= | # assignment      right-to-left   both
           &lt;&lt;= | # assignment      right-to-left   both
           &gt;&gt;= | # assignment      right-to-left   both
          &gt;&gt;&gt;=   # assignment      right-to-left   both</string>
            <key>name</key>
            <string>keyword.operator.assignment.augmented.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
          ~    | # bitwise-not     right-to-left   right
          &lt;&lt;   | # bitwise-shift   left-to-right   both
          &gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
          &gt;&gt;   | # bitwise-shift   left-to-right   both
          &amp;    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both</string>
            <key>name</key>
            <string>keyword.operator.bitwise.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
          &lt;=   | # relational      left-to-right   both
          &gt;=   | # relational      left-to-right   both
          &lt;    | # relational      left-to-right   both
          &gt;      # relational      left-to-right   both</string>
            <key>name</key>
            <string>keyword.operator.relational.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
          ===  | # equality        left-to-right   both
          !==  | # equality        left-to-right   both
           ==  | # equality        left-to-right   both
          !=     # equality        left-to-right   both</string>
            <key>name</key>
            <string>keyword.operator.comparison.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)=</string>
            <key>name</key>
            <string>keyword.operator.assignment.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
          --   | # decrement       n/a             right-or-left
          \+\+ | # increment       n/a             right-or-left
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both</string>
            <key>name</key>
            <string>keyword.operator.arithmetic.js</string>
          </dict>
        </array>
      </dict>
      <key>literal-labels</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>captures</key>
            <dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(?&lt;=['&quot;])(\s*)(:)</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.unquoted.label.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(?&lt;!\?|\? |case )(?!\?)([_$a-zA-Z][_$\w]*)\s*(:)</string>
            <key>name</key>
            <string>constant.other.object.key.js</string>
          </dict>
        </array>
      </dict>
      <key>literal-number</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
            <key>name</key>
            <string>invalid.illegal.numeric.hex.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
            <key>name</key>
            <string>invalid.illegal.numeric.octal.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?xi)(?:\B[-+])?(?:
           \b0x[0-9a-f]* # HEX
          |(          \B\.[0-9]+   # EG:    .999
            | \b[0-9]+ (\.[0-9]*)? # EG: 999.999 or 999. or 999
           )(e[-+]?[0-9]+)?        # EG: e+123 or E-123
          )</string>
            <key>name</key>
            <string>constant.numeric.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?:\B[-+]|\b)(Infinity)\b</string>
            <key>name</key>
            <string>constant.language.infinity.js</string>
          </dict>
        </array>
      </dict>
      <key>literal-punctuation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\;</string>
            <key>name</key>
            <string>punctuation.terminator.statement.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>,</string>
            <key>name</key>
            <string>meta.delimiter.object.comma.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\.</string>
            <key>name</key>
            <string>meta.delimiter.method.period.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\{|\}</string>
            <key>name</key>
            <string>meta.brace.curly.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\(|\)</string>
            <key>name</key>
            <string>meta.brace.round.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\[|\]</string>
            <key>name</key>
            <string>meta.brace.square.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)\s</string>
            <key>name</key>
            <string>meta.complete.method</string>
          </dict>
        </array>
      </dict>
      <key>literal-quasi</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>([a-zA-Z$_][\w$_]*)?(`)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.quasi.tag.name.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.quasi.begin.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>`</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.quasi.end.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quasi.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.quasi.element.js</string>
                <key>begin</key>
                <string>\${</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.quasi.element.begin.js</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>}</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.quasi.element.end.js</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literal-regex</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?x) (?&lt;= [\[,=(:] | ^ | &amp;&amp; | return )\s*((/)) (?! [/*+{}?] | $ )</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.js</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>string.regexp.js</string>
            <key>end</key>
            <string>((/([igm]*)))|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.other.js</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\\\n</string>
                <key>name</key>
                <string>constant.character.escape.newline.js</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\n</string>
                <key>name</key>
                <string>invalid.illegal.newline.js</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\\.</string>
                <key>name</key>
                <string>constant.character.escape.js</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literal-string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)'|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string-single-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>&quot;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)&quot;|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string-double-innards</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literal-variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\.?[A-Z][_$\dA-Z]*\b</string>
            <key>name</key>
            <string>variable.other.constant.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b([A-Z][_$\w]*\.?)\s*?(?:([a-z$_][\w_$]*(?=\())|([a-z$_][\w_$]*))?</string>
            <key>name</key>
            <string>meta.entity.static.js</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.class.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>meta.function.call.class.static.js</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.class.static.js</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)[_$a-zA-Z][_$\w]*\s*(?=[\[\.])</string>
            <key>name</key>
            <string>variable.other.object.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.property-name.js</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.object.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>([_$a-zA-Z][_$\w]*)\s*(?=[\[\.])</string>
            <key>name</key>
            <string>meta.property.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>variable.other.property.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(?&lt;=[\.\]])\s*[_$a-zA-Z][_$\w]*</string>
            <key>name</key>
            <string>meta.property.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>[_$a-zA-Z][_$\w]*</string>
            <key>name</key>
            <string>variable.other.readwrite.js</string>
          </dict>
        </array>
      </dict>
      <key>special</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(console)\b</string>
            <key>name</key>
            <string>entity.name.type.object.js.firebug</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\.(warn|info|log|error|time|timeEnd|assert)\b</string>
            <key>name</key>
            <string>support.function.js.firebug</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(debugger)\b</string>
            <key>name</key>
            <string>keyword.other.js</string>
          </dict>
        </array>
      </dict>
      <key>special-comments-conditional-compilation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>/\*(?=@)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.js</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.js</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.keyword.js</string>
              </dict>
            </dict>
            <key>name</key>
            <string>comment.block.conditional.js</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.keyword.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(@)(if|elif|else|end)</string>
            <key>name</key>
            <string>keyword.control.conditional.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.keyword.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(@)(cc_on|set)</string>
            <key>name</key>
            <string>keyword.operator.conditional.js</string>
          </dict>
          <dict>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.variable.js</string>
              </dict>
            </dict>
            <key>match</key>
            <string>(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript_build|_jscript_version|_jscript|_debug|_fast|[a-zA-Z]\w+)</string>
            <key>name</key>
            <string>variable.other.conditional.js</string>
          </dict>
        </array>
      </dict>
      <key>string-double-innards</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
            <key>name</key>
            <string>constant.character.escape.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\\n</string>
            <key>name</key>
            <string>constant.character.escape.newline.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\n</string>
            <key>name</key>
            <string>invalid.illegal.newline.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)&lt;/\s*script\s*&gt;</string>
            <key>name</key>
            <string>invalid.deprecated.inconsistent.js</string>
          </dict>
        </array>
      </dict>
      <key>string-single-innards</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
            <key>name</key>
            <string>constant.character.escape.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\\n</string>
            <key>name</key>
            <string>constant.character.escape.newline.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\n</string>
            <key>name</key>
            <string>invalid.illegal.newline.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)&lt;/\s*script\s*&gt;</string>
            <key>name</key>
            <string>invalid.deprecated.inconsistent.js</string>
          </dict>
        </array>
      </dict>
      <key>sugar</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^(?=(\t|  ))</string>
            <key>end</key>
            <string>(?=[^\t\s])</string>
            <key>name</key>
            <string>meta.leading-tabs</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group1.spaces</string>
                  </dict>
                  <key>10</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group10.spaces</string>
                  </dict>
                  <key>11</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group11.spaces</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group2.spaces</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group3.spaces</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group4.spaces</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group5.spaces</string>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group6.spaces</string>
                  </dict>
                  <key>7</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group7.spaces</string>
                  </dict>
                  <key>8</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group8.spaces</string>
                  </dict>
                  <key>9</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group9.spaces</string>
                  </dict>
                </dict>
                <key>match</key>
                <string>(    )(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?</string>
              </dict>
              <dict>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group1.tab</string>
                  </dict>
                  <key>10</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group10.tab</string>
                  </dict>
                  <key>11</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group11.tab</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group2.tab</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group3.tab</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group4.tab</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group5.tab</string>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group6.tab</string>
                  </dict>
                  <key>7</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group7.tab</string>
                  </dict>
                  <key>8</key>
                  <dict>
                    <key>name</key>
                    <string>meta.even-tab.group8.tab</string>
                  </dict>
                  <key>9</key>
                  <dict>
                    <key>name</key>
                    <string>meta.odd-tab.group9.tab</string>
                  </dict>
                </dict>
                <key>match</key>
                <string>(\t)(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>support</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(Array|Boolean|Date|Function|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap)\b</string>
            <key>name</key>
            <string>support.class.builtin.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b</string>
            <key>name</key>
            <string>support.class.error.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(s(hift|ort|plice)|unshift|p(op|ush)|reverse)\b(?=\()</string>
            <key>name</key>
            <string>entity.name.function.mutator.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(natives|buffer|child_process|cluster|crypto|d(gram|ns)|fs|http(s)?|net|os|path|punycode|(query)?string(_decoder)?|re(adline|pl)|tls|tty|util|vm|zlib)\b</string>
            <key>name</key>
            <string>support.module.node.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(process(.env)?|global|GLOBAL|root|std(out|in|err)|exports)\b</string>
            <key>name</key>
            <string>support.keyword.node.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b</string>
            <key>name</key>
            <string>support.class.node.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b(?=\()</string>
            <key>name</key>
            <string>entity.name.function.js</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b</string>
            <key>name</key>
            <string>support.constant.dom.js</string>
          </dict>
        </array>
      </dict>
    </dict>
    <key>uuid</key>
    <string>0D2D03B9-F18B-4D9D-A960-716FDEC35331</string>
  </dict>
</plist>
