{
   "name":"Play Scala Template (HTML)",
   "scopeName":"text.play",
   "fileTypes":[
      "scala.html"
   ], 
   "repository": {
      "templateHeader": {
         "comment":"Template header",
         "name":"source.expression",
         "begin":"(?<=\\A)(@)\\(",
         "beginCaptures":{
            "1":{
               "name":"keyword.at"
            }
         },
         "patterns":[
            {
               "include":"source.scala"
            },
            {
               "name":"source.expressionP",
               "begin":"\\(",
               "patterns":[
                  {
                     "include":"$self"
                  },
                  {
                     "include":"source.scala"
                  }
               ],
               "end":"\\)"
            }
         ],
         "end":"\\)(?=[^(])|\\Z"
      },
      "expression": {
         "comment":"Classical expression ($self is not working?)",
         "name":"source.expression",
         "begin":"(@)(?=[a-zA-Z])",
         "beginCaptures":{
            "1":{
               "name":"keyword.at"
            }
         },
         "patterns":[
            {
               "include":"source.scala"
            },
            {
               "name":"source.expression",
               "begin":"\\(",
               "patterns":[
                  {
                     "include":"source.scala"
                  },
                  {
                     "name":"source.expression",
                     "begin":"\\(",
                     "patterns":[
                        {
                           "include":"source.scala"
                        },
                        {
                           "name":"source.expression",
                           "begin":"\\(",
                           "patterns":[
                              {
                                 "include":"source.scala"
                              },
                              {
                                 "name":"source.expression",
                                 "begin":"\\(",
                                 "patterns":[
                                    {
                                       "include":"source.scala"
                                    }
                                 ],
                                 "end":"\\)"
                              }
                           ],
                           "end":"\\)"
                        }
                     ],
                     "end":"\\)"
                  }
               ],
               "end":"\\)"
            }
         ],
         "end":"\\s*\\s*\\s*=\\s*(\\{|\\s*(?=@\\{))|\\s*@?\\{\\s*\\(?[_a-zA-Z0-9,]*\\)?\\s*=>|\\s*\\{|(?=[^(._a-zA-Z0-9]|[.](?=[^a-zA-Z]))"
      }, 
      "paranthesesExpression": {
         "comment":"Parentheses expression",
         "name":"source.expression",
         "begin":"(@)\\(",
         "beginCaptures":{
            "1":{
               "name":"keyword.at"
            }
         },
         "patterns":[
            {
               "include":"source.scala"
            },
            {
               "name":"source.expressionP",
               "begin":"\\(",
               "patterns":[
                  {
                     "include":"$self"
                  },
                  {
                     "include":"source.scala"
                  }
               ],
               "end":"\\)"
            }
         ],
         "end":"\\)"
      },
      "bracketExpression": {
         "comment":"Bracket expression",
         "name":"source.expression",
         "begin":"(@)\\{",
         "beginCaptures":{
            "1":{
               "name":"keyword.at"
            }
         },
         "patterns":[
            {
               "include":"source.scala"
            },
            {
               "name":"source.expressionP",
               "begin":"\\{",
               "patterns":[
                  {
                     "include":"$self"
                  },
                  {
                     "include":"source.scala"
                  }
               ],
               "end":"\\}"
            }
         ],
         "end":"\\}"
      },
      "blockContinuation": {
         "comment":"Block continuation",
         "name":"source.expression",
         "begin":"\\}",
         "patterns":[
            {
               "include":"source.scala"
            },
            {
               "name":"source.expressionP",
               "begin":"\\(",
               "patterns":[
                  {
                     "include":"$self"
                  },
                  {
                     "include":"source.scala"
                  }
               ],
               "end":"\\)"
            }
         ],
         "end":"\\s*else\\s*\\{|\\s*\\{\\s*\\(?[_a-zA-Z0-9,]*\\)?\\s*=>|\\s*\\{|(?=[^()._a-zA-Z0-9]|[.](?=[^a-zA-Z]))"
      },
      "caseExpression": {
         "comment":"Case expression",
         "name":"source.expression",
         "begin": "(?=case\\s+.*=>\\s*@?\\{)",
         "patterns":[
            {
               "include":"source.scala"
            }
         ],
         "end": "=>\\s*(?=@\\{)|=>\\s*\\{"
      },
      "comment": {
         "comment":"Comment",
         "name":"comment",
         "begin":"@[*]",
         "end":"[*]@"
      },
      "embedded-code": {
         "name":"source.coco",
         "begin":"X",
         "end":"|"
      },
            "string-double-quoted":{
         "begin":"\"",
         "end":"\"",
         "name":"string.quoted.double.html",
         "endCaptures":{
            "0":{
               "name":"punctuation.definition.string.end.html"
            }
         },
         "beginCaptures":{
            "0":{
               "name":"punctuation.definition.string.begin.html"
            }
         },
         "patterns":[
            {
               "include":"#embedded-code"
            },
            {
               "include":"#entities"
            }
         ]
      },
      "embedded-code":{
         "patterns":[
            { "include": "#templateHeader" },
            { "include": "#expression" },
            { "include": "#paranthesesExpression" },
            { "include": "#bracketExpression" },
            { "include": "#blockContinuation" },
            { "include": "#caseExpression" },
            { "include": "#comment" },
            { "include": "#escapedAt" },
            { "include": "#invalidAt" }
         ]
      },
      "tag-generic-attribute":{
         "name":"entity.other.attribute-name.html",
         "match":"\\b([a-zA-Z\\-:]+)"
      },
      "tag-stuff":{
         "patterns":[
            {
               "include":"#tag-id-attribute"
            },
            {
               "include":"#tag-generic-attribute"
            },
            {
               "include":"#string-double-quoted"
            },
            {
               "include":"#string-single-quoted"
            },
            {
               "include":"#embedded-code"
            }
         ]
      },
      "tag-id-attribute":{
         "captures":{
            "1":{
               "name":"entity.other.attribute-name.id.html"
            },
            "2":{
               "name":"punctuation.separator.key-value.html"
            }
         },
         "begin":"\\b(id)\\b\\s*(=)",
         "end":"(?<='|\")",
         "name":"meta.attribute-with-value.id.html",
         "patterns":[
            {
               "begin":"\"",
               "end":"\"",
               "name":"string.quoted.double.html",
               "contentName":"meta.toc-list.id.html",
               "beginCaptures":{
                  "0":{
                     "name":"punctuation.definition.string.begin.html"
                  }
               },
               "patterns":[
                  {
                     "include":"#embedded-code"
                  },
                  {
                     "include":"#entities"
                  }
               ],
               "endCaptures":{
                  "0":{
                     "name":"punctuation.definition.string.end.html"
                  }
               }
            },
            {
               "begin":"'",
               "end":"'",
               "name":"string.quoted.single.html",
               "contentName":"meta.toc-list.id.html",
               "beginCaptures":{
                  "0":{
                     "name":"punctuation.definition.string.begin.html"
                  }
               },
               "patterns":[
                  {
                     "include":"#embedded-code"
                  },
                  {
                     "include":"#entities"
                  }
               ],
               "endCaptures":{
                  "0":{
                     "name":"punctuation.definition.string.end.html"
                  }
               }
            }
         ]
      },
      "string-single-quoted":{
         "begin":"'",
         "end":"'",
         "name":"string.quoted.single.html",
         "endCaptures":{
            "0":{
               "name":"punctuation.definition.string.end.html"
            }
         },
         "beginCaptures":{
            "0":{
               "name":"punctuation.definition.string.begin.html"
            }
         },
         "patterns":[
            {
               "include":"#embedded-code"
            },
            {
               "include":"#entities"
            }
         ]
      },
      "entities":{
         "patterns":[
            {
               "captures":{
                  "1":{
                     "name":"punctuation.definition.entity.html"
                  },
                  "3":{
                     "name":"punctuation.definition.entity.html"
                  }
               },
               "name":"constant.character.entity.html",
               "match":"(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
            },
            {
               "name":"invalid.illegal.bad-ampersand.html",
               "match":"&"
            }
         ]
      },
      "invalidAt": {
         "name":"invalid.illegal",
         "match":"@"
      },
      "escapedAt": {
         "name":"keyword.escapedAt",
         "match":"@@"
      }
   },
   "patterns":[
      { "include": "#templateHeader" },
      { "include": "#expression" },
      { "include": "#paranthesesExpression" },
      { "include": "#bracketExpression" },
      { "include": "#blockContinuation" },
      { "include": "#caseExpression" },
      { "include": "#comment" },
      { "include": "#escapedAt" },
      { "include": "#invalidAt" },
      {
         "begin":"(<)([a-zA-Z0-9:]++)(?=[^>]*></\\2>)",
         "end":"(>)(<)(/)(\\2)(>)",
         "name":"meta.tag.any.html",
         "endCaptures":{
            "1":{
               "name":"punctuation.definition.tag.end.html"
            },
            "3":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
            },
            "5":{
               "name":"punctuation.definition.tag.end.html"
            },
            "4":{
               "name":"entity.name.tag.html"
            }
         },
         "beginCaptures":{
            "1":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"entity.name.tag.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            }
         ]
      },
      {
         "captures":{
            "1":{
               "name":"punctuation.definition.tag.html"
            },
            "2":{
               "name":"entity.name.tag.xml.html"
            }
         },
         "begin":"(<\\?)(xml)",
         "end":"(\\?>)",
         "name":"meta.tag.preprocessor.xml.html",
         "patterns":[
            {
               "include":"#tag-generic-attribute"
            },
            {
               "include":"#string-double-quoted"
            },
            {
               "include":"#string-single-quoted"
            }
         ]
      },
      {
         "captures":{
            "0":{
               "name":"punctuation.definition.comment.html"
            }
         },
         "begin":"<!--",
         "end":"--\\s*>",
         "name":"comment.block.html",
         "patterns":[
            {
               "name":"invalid.illegal.bad-comments-or-CDATA.html",
               "match":"--"
            },
            {
               "include":"#embedded-code"
            }
         ]
      },
      {
         "captures":{
            "0":{
               "name":"punctuation.definition.tag.html"
            }
         },
         "begin":"<!",
         "end":">",
         "name":"meta.tag.sgml.html",
         "patterns":[
            {
               "captures":{
                  "1":{
                     "name":"entity.name.tag.doctype.html"
                  }
               },
               "begin":"(?i:DOCTYPE)",
               "end":"(?=>)",
               "name":"meta.tag.sgml.doctype.html",
               "patterns":[
                  {
                     "name":"string.quoted.double.doctype.identifiers-and-DTDs.html",
                     "match":"\"[^\">]*\""
                  }
               ]
            },
            {
               "begin":"\\[CDATA\\[",
               "end":"]](?=>)",
               "name":"constant.other.inline-data.html"
            },
            {
               "name":"invalid.illegal.bad-comments-or-CDATA.html",
               "match":"(\\s*)(?!--|>)\\S(\\s*)"
            }
         ]
      },
      {
         "include":"#embedded-code"
      },
      {
         "captures":{
            "1":{
               "name":"punctuation.definition.tag.html"
            },
            "3":{
               "name":"punctuation.definition.tag.html"
            },
            "2":{
               "name":"entity.name.tag.style.html"
            }
         },
         "begin":"(?:^\\s+)?(<)((?i:style))\\b(?![^>]*/>)",
         "end":"(</)((?i:style))(>)(?:\\s*\\n)?",
         "name":"source.css.embedded.html",
         "patterns":[
            {
               "include":"#tag-stuff"
            },
            {
               "patterns":[
                  {
                     "include":"#embedded-code"
                  },
                  {
                     "include":"source.css"
                  }
               ],
               "begin":"(>)",
               "end":"(?=</(?i:style))",
               "beginCaptures":{
                  "1":{
                     "name":"punctuation.definition.tag.html"
                  }
               }
            }
         ]
      },
      {
         "begin":"(?:^\\s+)?(<)((?i:script))\\b(?![^>]*/>)",
         "end":"(?<=</(script|SCRIPT))(>)(?:\\s*\\n)?",
         "name":"source.js.embedded.html",
         "endCaptures":{
            "2":{
               "name":"punctuation.definition.tag.html"
            }
         },
         "beginCaptures":{
            "1":{
               "name":"punctuation.definition.tag.html"
            },
            "2":{
               "name":"entity.name.tag.script.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            },
            {
               "captures":{
                  "1":{
                     "name":"punctuation.definition.tag.html"
                  },
                  "2":{
                     "name":"entity.name.tag.script.html"
                  }
               },
               "begin":"(?<!</(?:script|SCRIPT))(>)",
               "end":"(</)((?i:script))",
               "patterns":[
                  {
                     "captures":{
                        "1":{
                           "name":"punctuation.definition.comment.js"
                        }
                     },
                     "name":"comment.line.double-slash.js",
                     "match":"(//).*?((?=</script)|$\\n?)"
                  },
                  {
                     "captures":{
                        "0":{
                           "name":"punctuation.definition.comment.js"
                        }
                     },
                     "begin":"/\\*",
                     "end":"\\*/|(?=</script)",
                     "name":"comment.block.js"
                  },
                  {
                     "include":"#php"
                  },
                  {
                     "include":"source.js"
                  }
               ]
            }
         ]
      },
      {
         "begin":"(</?)((?i:body|head|html)\\b)",
         "end":"(>)",
         "name":"meta.tag.structure.any.html",
         "captures":{
            "1":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"entity.name.tag.structure.any.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            }
         ],
         "endCaptures":{
            "1":{
               "name":"punctuation.definition.tag.end.html"
            }
         }
      },
      {
         "begin":"(</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\\b)",
         "end":"(>)",
         "name":"meta.tag.block.any.html",
         "endCaptures":{
            "1":{
               "name":"punctuation.definition.tag.end.html"
            }
         },
         "beginCaptures":{
            "1":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"entity.name.tag.block.any.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            }
         ]
      },
      {
         "begin":"(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b)",
         "end":"((?: ?/)?>)",
         "name":"meta.tag.inline.any.html",
         "endCaptures":{
            "1":{
               "name":"punctuation.definition.tag.end.html"
            }
         },
         "beginCaptures":{
            "1":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"entity.name.tag.inline.any.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            }
         ]
      },
      {
         "begin":"(</?)([a-zA-Z0-9:]+)",
         "end":"(>)",
         "name":"meta.tag.other.html",
         "endCaptures":{
            "1":{
               "name":"punctuation.definition.tag.end.html"
            }
         },
         "beginCaptures":{
            "1":{
               "name":"punctuation.definition.tag.begin.html"
            },
            "2":{
               "name":"entity.name.tag.other.html"
            }
         },
         "patterns":[
            {
               "include":"#tag-stuff"
            }
         ]
      },
      {
         "include":"#entities"
      },
      {
         "name":"invalid.illegal.incomplete.html",
         "match":"<>"
      },
      {
         "name":"invalid.illegal.bad-angle-bracket.html",
         "match":"<"
      }
   ],
   "uuid":"104e6558-306a-4264-8432-5db3d908c33e"
}